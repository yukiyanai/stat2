[
  {
    "objectID": "r-markdown.html",
    "href": "r-markdown.html",
    "title": "5  Rマークダウンの使い方",
    "section": "",
    "text": "今日の目標"
  },
  {
    "objectID": "r-markdown.html#rマークダウンファイルを-knit-してレポートを作る",
    "href": "r-markdown.html#rマークダウンファイルを-knit-してレポートを作る",
    "title": "5  Rマークダウンの使い方",
    "section": "5.1 Rマークダウンファイルを knit してレポートを作る",
    "text": "5.1 Rマークダウンファイルを knit してレポートを作る\nRマークダウンファイルの作り方と書き方は後で説明する。その前に、Rマークダウンファイルを書いた後、それをどうやって他の形式のファイルに出力する（言い換えると、レポートとして提出可能な状態に変換する）方法を説明する。\nRマークダウンファイルをPDF（またはHTML） に出力するために、rmarkdown::render() やknitr::knit() を利用する。これらがインストール済みでない場合はまずインストールする。 ::: {.cell}\ninstall.packages(\"tidyverse\", dependencies = TRUE)\ninstall.packages(\"rmarkdown\", dependencies = TRUE) \ninstall.packages(\"knitr\", dependencies = TRUE) \ninstall.packages(\"systemfonts\")\ninstall.packages(\"remotes\")\nremotes::install_github(\"Gedevan-Aleksizde/fontregisterer\", \n                        repos = NULL, type = \"source\")\n:::\n\n5.1.1 RマークダウンファイルをPDFファイルに出力する\nRマークダウンファイルからPDFファイルを作るためにはTeXが必要である。まず、 tinytex をインストールする（注意：大学PCにはインストールしない！）。\n\ninstall.packages(\"tinytex\")\n\nTeXを使った経験がなく、パソコンにTeXがインストールされていない場合は、以下のコマンドを実行してTeX環境を整える。それなりに時間がかかるので気長に待とう。\n\n\n\n\n\n\n重要\n\n\n\n既にLaTeX環境が設定済みなら、以下のコードを実行する必要はない。情報演習室のパソコンには Tex Live がインストールされているので、次のコードは実行しない！\n\n\n\n\n\n\n\n\nTip\n\n\n\n数式や図表を含む論文を書く際には、LaTeX を使うことが多い。LaTeX を利用するためには、TeX Live（macOS の場合は MacTeX でも可）をインストールする（無料）。インストール方法は ココ で説明されている。TeX Live (MacTeX) をインストールするなら次のコードを実行してはいけない。 実行してしまったが TeX Live に切り替えたいという場合は、tinytex::uninstall_tinytex() を実行して tinytex をアンインストールしてから、TeX Live をインストールしよう。\n\n\n\ntinytex::install_tinytex()\n\n試しに、stat2_sample2022.Rmd を “stat2_sample2022.pdf” に変換してみよう。\nまず、リンク先からファイルをダウンロードして、RStudio で開こう。開いたら、コード編集画面の上にある “Knit” ボタン（毛糸と棒針のマーク）の右にある三角ボタンを押して、表示されたメニューから “Knit to PDF” を選べばPDFができる。初めて実行するときは、足りないパッケージを自動でインストールするので、時間がかかるかもしれない。\n出力されたPDFファイルは（他のディレクトリを指定しない限り）元のRmdファイルと同じディレクトリ（ダウンロードしてそのまま開いた場合は「ダウンロード」フォルダ）に保存される。出来上がったPDFファイルをAdobe Readerやskim 等のPDFリーダで開いて確認してみよう。\nうまくいけば stat2_sample2022_success.pdf と同じ（ような）ファイルができるはずである。\n\n\n5.1.2 R MarkdownファイルをHTMLファイルに出力する\n試しに、stat2_sample2022.Rmd （上と同じファイル）を “stat2_sample2022.html” に変換してみよう。コード編集画面の上にある “Knit” ボタン（毛糸と棒針のマーク）の右にある三角ボタンを押して、表示されたメニューから “Knit to HTML” を選べばHTMLファイルができる。\n出力されたHTMLファイルは（他のディレクトリを指定しない限り）元のRmdファイルと同じディレクトリ（ダウンロードしてそのまま開いた場合は「ダウンロード」フォルダ）に保存される。出来上がったHTMLファイルをウェブブラウザ（Google Chrome, Firefox, Safari, etc.）で開いて確認してみよう。\nうまくいけば stat2_sample2022_success.html と同じ（ような）ファイルができるはずである。"
  },
  {
    "objectID": "r-markdown.html#rマークダウンによるレポート作成",
    "href": "r-markdown.html#rマークダウンによるレポート作成",
    "title": "5  Rマークダウンの使い方",
    "section": "5.2 Rマークダウンによるレポート作成",
    "text": "5.2 Rマークダウンによるレポート作成\nRマークダウンファイルをPDF（やHTML）に変換する方法がわかったところで、Rマークダウンファイルの書き方を覚えよう。\nRStudio では、上部のメニューから [File] -> [New File] -> [R Markdown…] を選ぶと、新しい R マークダウンファイルを作ることができる。 ファイルを開くことができたら、名前をつけて保存しよう。 このファイルの拡張子は .Rmd にする。\nこのウェブ資料は、.Rmd ファイルではなく .qmd (Quatro マークダウン) ファイルで作られている。Rマークダウンファイルの書き方を .qmd ファイル内で説明すると混乱するので、以降の説明は r-markdown.html に記載する。\nRマークダウンの書き方を説明する上のページ（.html ファイル）の元となったRマークダウンファイルは r-markdown.Rmd である。また、同じファイルをPDFに変換すると、r-markdown.pdf ができる。元の.Rmd ファイルと、それを元に作られた .pdf ファイル、.html ファイルの3つをよく比べてみよう。\nこの授業の課題の作成には、Rマークダウンの利用が必須である。 そこで、今後の授業で使えるテンプレートを配布する。 stat2_template2022.Rmd をダウンロードし、YAML ヘッダやグローバルチャンクオプションをそのまま利用してほしい。"
  },
  {
    "objectID": "intro-to-R.html",
    "href": "intro-to-R.html",
    "title": "\n2  Rの基本操作\n",
    "section": "",
    "text": "ここでは、Rの基本的な使い方を解説する。RとRStudioのインストールについては、以下の資料を参照されたい。"
  },
  {
    "objectID": "intro-to-R.html#rの基礎",
    "href": "intro-to-R.html#rの基礎",
    "title": "\n2  Rの基本操作\n",
    "section": "\n2.1 Rの基礎",
    "text": "2.1 Rの基礎\nRのコードはRのConsoleに直接入力してもいいし、スクリプトに保存してRから呼び出してもよい。スクリプトを使うときは、スクリプトファイルをfile_name.R のように .R ファイルとして保存する。そして、RのConsole で source(\"file_name.R\") とすれば、スクリプト全体が実行される。\nRコマンドの区切りは改行である。改行すれば、1つのコマンドが終了したと認識される。\n\n35 + 87\n\n[1] 122\n\n\nただし、括弧が閉じていなかったり、行末に二項演算子 (+ や * など) があるときは、コマンドが次の行まで続いていると認識される。\n\n35 +\n    87\n\n[1] 122\n\n\n1行に複数のコマンドを書きたいときは ; で区切る。\n\n35 + 87; 25 * 4\n\n[1] 122\n\n\n[1] 100\n\n\n通常は、1行には1つのコマンドのみ書くようにしよう。\nRは大文字と小文字を区別する。したがって、Var1 と var1 は異なるモノ（変数、オブジェクト）として認識される。 変数名は英数字と_ [アンダースコア] のみで構成するべきである（日本語も使えるが、トラブルの元なので避けるべき）。ただし、頭文字に数字は使えない。\nスペースは1つ以上ならいくつあっても1つのスペースがある場合と同じである。また、演算子の前後のスペースはあってもなくてもよい（コードの読み易さを考えてスペースの有無を決めること）。\n\n\n\n\n\n\n重要\n\n\n\nコード中のスペースは半角スペースでなければならない。日本語入力で使うスペースは全角スペースだが、全角スペースがあるとコードが正しく動作しないので要注意。プログラミングの際には日本語入力が「オフ」になっていることを確認しよう。\n\n\n# はコメントの開始として扱われる。 行頭に# を書くと、その行すべてがコメントとして扱われる。\n\n# 2 * 4  # 行頭からすべてコメント \n\n行の途中に# を書くと、# 以降がコメントとして扱われる。\n\n2 * 4  # これはコメント\n\n[1] 8\n\n\nコメントを書く作業は、コマンドを書く作業と同様に大切である。詳しくは授業で説明する。\nRに用意されている関数の使い方についてヘルプを参照したいときは?関数名 （またはhelp(関数名))　とする。たとえば、平均値を求める関数 mean() のヘルプは、\n\n?mean\n\nで確認できる。ウェブブラウザでヘルプを参照したいときは、help.start() とする。\nインストール済みのパッケージを利用するときは、library(パッケージ名) とする。たとえば、ggplot2 パッケージを使いたいなら、\n\nlibrary(ggplot2)\n\nとする。パッケージをインストールする際は、install.packages(\"パッケージ名\") とする。その際、どのレポジトリからダウンロードするか尋ねられるので、自分に一番近いところ選ぶ。（パッケージをインストールする度にレポジトリを指定するのが面倒なら、.Rprofile であらかじめレポジトリを指定しておく。）\n\n2.1.1 Rを電卓代わりに使う\nRは電卓の代わりとして使うことができる。 たとえば、\n\n1 + 1       # 足し算\n\n[1] 2\n\n100 - 20    # 引き算\n\n[1] 80\n\n5 * 8       # 掛け算\n\n[1] 40\n\n2 / 3       # 割り算\n\n[1] 0.6666667\n\n2 ^ 3       # 累乗\n\n[1] 8\n\nsqrt(2)     # 平方根\n\n[1] 1.414214\n\n2 ^ (1 / 2) # sqrt(2) と同じ\n\n[1] 1.414214\n\n\nなどの計算ができる。 計算の順番を指定するときは、() で囲めばよい。\n\n(5 * (2 + 1)) ^ 3  # (2 + 1) を最初に計算し、それに5を掛けてから最後に三乗する\n\n[1] 3375\n\n\n\n2.1.2 変数の利用\nRでは、変数（正確にはオブジェクト）を（ある程度）自由に作ることができる。 変数の名前は自由に決めてよい（ただし、数字から始まるものはだめ。また、- [ハイフン] はマイナスと区別できないので使えない）。 たとえば、\n\na <- 1\nb <- 2\n\nとすると、a, b という2つの変数ができる。ここで <- は変数に値を割り当てることを意味する。 （<- の代わりに= を使うこともできるが混乱の元になるので、変数を定義するときは常に<- を使うことにする。）\n<- はショートカットキーを使って入力する。\n\nmacOS: option + -（option キーと -[マイナス] キーを同時に押す）\nWindows: Alt + -（Alt キーと - [マイナス] キーを同時に押す）\n\nこうすることで、 <- だけでなく、その前後に半角スペースが1つずつ挿入されるので便利である。つまり、順番に\n\na\n\noption + - または Alt + -\n\n1\n\nと打つと\n\na <- 1\n\nと入力される。ショートカットキーを使わないと、\n\na\nSPACE\n<\n-\nSPACE\n1\n\nと6段階の入力が必要になる。ショートカットキーを使うことで、これを3回に短縮できる。\n定義された変数名のみを入力して実行すると、変数の中身が表示される。\n\na\n\n[1] 1\n\nb\n\n[1] 2\n\n\nこの変数は、計算に使える。\n\na + b\n\n[1] 3\n\na - b\n\n[1] -1\n\na * b\n\n[1] 2\n\na / b\n\n[1] 0.5\n\nb ^ a\n\n[1] 2\n\n\nまた、\n\nd <- a\na <- 3\n\nとすると、\\(d = 1\\), \\(a = 3\\) となる（各自確かめること）。\nまた、変数名には日本語も使える。 たとえば、\n\n変数1 <- 5\n変数2 <- 7\n変数1 * 変数2\n\n[1] 35\n\n\nとすることも可能である。しかし、変数名に日本語を使うと、（1）英語/日本語の切り替えが面倒であり、（2）文字化け等の予期せぬ問題が生じることがあるので、なるべく日本語の変数名は使わないほうが無難である。\n変数の割当と画面への出力を同時に行いたいときは、全体を () で囲む。\n\n(d <- 3 * 5)\n\n[1] 15\n\n\n変数を消去したいときはrm() 関数を使う。\n\nrm(d)\n\n\n2.1.3 ベクトルと行列\n\n2.1.3.1 ベクトル (vectors)\nRで特定のベクトル (vector) を作りたいときは、c() を（combine; 結合する）使う （上での変数を作るときにc という名前をスキップしたのは、この cという名前の関数があるためだった）。 たとえば、1, 2, 3, 4, 5 という5つの数字からなるベクトル a を作るには、\n\na <- c(1, 2, 3, 4, 5)\n\nとする。このベクトルを画面に表示すると、\n\na\n\n[1] 1 2 3 4 5\n\n\nとなる。\nベクトルの中身は文字列でもかまわない。 たとえば、\n\nuniv_kochi <- c(\"KUT\", \"University of Kochi\", \"Kochi University\")\n\nとすれば、文字列 (characters) のベクトルができる。 このように、文字列は引用符（'' でも\"\" でもよい）で囲む。\nひとつひとつの要素を指定する代わりに、様々な方法でベクトルを作ることが可能である。 たとえば、seq() 関数（sequence; 数列）を使うと、一連の数字からなるベクトルを作ることができる。\n\nseq(1, 20, by = 1)   # 1から20までの整数。1:20 でも同じ\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\nseq(1, 20, by = 2)   # 1から19までの奇数\n\n [1]  1  3  5  7  9 11 13 15 17 19\n\nseq(2, 20, by = 2)   # 2から20までの偶数\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\nseq(20, 1, by = -5)  # 降順、間隔は5\n\n[1] 20 15 10  5\n\nseq(1, 100, length.out = 10) # 最小値が1、最大値が100で、要素の数 (length) が10のベクトル\n\n [1]   1  12  23  34  45  56  67  78  89 100\n\n\nseq(x, y, by = 1) の場合はより単純に x : yとすればよい。\n\n1 : 20\n\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n\n\nまた、rep()関数（replicate; 複製する）も便利である。\n\nrep(3, 10)   # 3が10個のベクトル\n\n [1] 3 3 3 3 3 3 3 3 3 3\n\nrep(c('a', 'b', 'c'), c(3, 1, 2))  # aが3つ, bが1つ, cが2つのベクトル\n\n[1] \"a\" \"a\" \"a\" \"b\" \"c\" \"c\"\n\n\nベクトルの\\(i\\)番目の要素にアクセスするにはベクトル名[i]とする。 同時に複数の要素を取り出すこともできる。 たとえば、\n\na <- seq(10, 100, length.out = 10)\nb <- 10:1\na[2]\n\n[1] 20\n\nb[2]\n\n[1] 9\n\na[3:5]\n\n[1] 30 40 50\n\na[c(1,3,5)]\n\n[1] 10 30 50\n\na[c(8, 2, 4)]\n\n[1] 80 20 40\n\n\n\n2.1.3.2 ベクトルの演算\nRでは、ベクトルを使った演算が可能である。 たとえば、次のような計算ができる。\n\nx <- 1 : 10\nx + 10    # ベクトルxの各要素に10を加える\n\n [1] 11 12 13 14 15 16 17 18 19 20\n\nx - 5     # ベクトルxの各要素から5を引く\n\n [1] -4 -3 -2 -1  0  1  2  3  4  5\n\nx * 2     # ベクトルxの各要素に2をかける\n\n [1]  2  4  6  8 10 12 14 16 18 20\n\nx / 3     # ベクトルxの各要素を3で割る\n\n [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 2.0000000 2.3333333\n [8] 2.6666667 3.0000000 3.3333333\n\nx ^ 2     # ベクトルxの各要素を2乗する\n\n [1]   1   4   9  16  25  36  49  64  81 100\n\nsqrt(x)   # ベクトルxの各要素の平方根（square root）を計算する\n\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n\n\nまた、複数のベクトルを使って、次のような計算ができる。\n\nx <- 1:10\ny <- -10:-1\n\n# xのi番目の要素とyのi番目の要素を足す（i = 1, 2, ..., 10）\nx + y\n\n [1] -9 -7 -5 -3 -1  1  3  5  7  9\n\n# xのi番目の要素からyのi番目の要素を引く（i = 1, 2, ..., 10）\nx - y\n\n [1] 11 11 11 11 11 11 11 11 11 11\n\n# xのi番目の要素とyのi番目の要素をかける（i = 1, 2, ..., 10）\nx * y\n\n [1] -10 -18 -24 -28 -30 -30 -28 -24 -18 -10\n\n# xのi番目の要素をyのi番目の要素で割る（i = 1, 2, ..., 10）\nx / y\n\n [1]  -0.1000000  -0.2222222  -0.3750000  -0.5714286  -0.8333333  -1.2000000\n [7]  -1.7500000  -2.6666667  -4.5000000 -10.0000000\n\n# xのi番目の要素を「yのi番目の要素」乗にする（i = 1, 2, ..., 10）\nx ^ y\n\n [1] 1.000000e+00 1.953125e-03 1.524158e-04 6.103516e-05 6.400000e-05\n [6] 1.286008e-04 4.164931e-04 1.953125e-03 1.234568e-02 1.000000e-01\n\n\nベクトル同士の足し算（引き算）をしても、ベクトルの長さは変わらない。\n\nlength(x)\n\n[1] 10\n\nlength(y)\n\n[1] 10\n\nlength(x + y)\n\n[1] 10\n\n\n長さの異なるベクトルを使って演算を行うと、短いのほうのベクトルは要素をリサイクルして対応する。\n\nx <- 1 : 10\ny <- c(100, 200)\nx + y\n\n [1] 101 202 103 204 105 206 107 208 109 210\n\n\nただし、長いほうのベクトルの長さが短いほうのベクトルの長さの整数倍になっていないときは、警告 (warning) が出る。\n\nx <- 1 : 10\ny <- c(100, 200, 300)\nx + y\n\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n\n\n [1] 101 202 303 104 205 306 107 208 309 110\n\n\n2つのベクトルの内積 (dot product) は%*% で、直積 (outer product) は%o% またはouter() で求められる。\nx <- c(1, 3, 5)\ny <- c(10, 20, 30)\nx %*% y      # xとyの内積\nx %o% y      # xとyの直積\nouter(x, y)  # xとyの直積\n\n\n2.1.3.3 行列 (matrices)\nRで行列を作るには、matrix()関数を使う。 たとえば、\n\n(A <- matrix(1:9, nrow = 3, byrow = TRUE))\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n(B <- matrix(1:9, nrow = 3, byrow = FALSE))\n\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n\n\nのようにする。 ここで、行列Aと行列Bの違いに注目する。 要素全体をひとつの集合としてみると、AとBの行列は全く同じである。 これは、上のコードでは1:9という部分が同じだからである。 しかし、要素の並び方が異なる。 Aを作ったコードはbyrow = TRUEとなっている。 これは、行 (row) 単位でセルを埋めて行くということである。 それに対し、Bではbyrow = FALSE となっている。 これは行単位でセルを埋めない（したがって、列 [col] 単位で埋める）ということを意味する。 この違いが、AとBの違いを生み出している。 行列を作るときは行数 nrow と列数 ncol を指定するが、要素の合計数が決まっているときは、どちらか一方を指定すれば、もう一方は自動的に決められる。 上の例では、要素の数が9で、行の数に3を指定したので、列の数は自動的に 9 / 3 = 3 になっている。\n行列の各行と各列にはそれぞれ名前を付けることができる。\n\nrow.names(A) <- c('row1', 'row2', 'row3')  # 各行に名前をつける\ncolnames(A) <- c('col1', 'col2', 'col3')   # 各列に名前をつける\nA\n\n     col1 col2 col3\nrow1    1    2    3\nrow2    4    5    6\nrow3    7    8    9\n\n\nrow.names()には . があり、colnames()にはそれがないことに注意。\n行列の\\(i\\)行\\(j\\)列を取り出すには、行列名[i, j]とする。 例えば\n\nA[1, 3]          # 第1行、第3列の要素を取り出す\n\n[1] 3\n\nA[2, c(1, 3)]    # 第2行で、第1列と第3列の要素を取り出す\n\ncol1 col3 \n   4    6 \n\nA[3, ]           # 第3行の要素をすべて取り出す\n\ncol1 col2 col3 \n   7    8    9 \n\nA[, 2]           # 第2列の要素をすべて取り出す\n\nrow1 row2 row3 \n   2    5    8 \n\n\n\n2.1.3.4 行列の演算\nRでは行列を使った計算ができる。\n基本的な演算の結果は次のとおりである。\n\nA <- matrix(1:9, ncol = 3)   　# 行列Aを定義する\nB <- matrix(-4:4, ncol = 3)    # 行列Bを定義する\nA + 3   # 行列の各要素に3を加える\n\n     [,1] [,2] [,3]\n[1,]    4    7   10\n[2,]    5    8   11\n[3,]    6    9   12\n\n2 * A   # 行列の各要素を2倍する\n\n     [,1] [,2] [,3]\n[1,]    2    8   14\n[2,]    4   10   16\n[3,]    6   12   18\n\nA + B   # Aのi行j列要素とBのi行j列要素を足す (i, j = 1, 2, 3)\n\n     [,1] [,2] [,3]\n[1,]   -3    3    9\n[2,]   -1    5   11\n[3,]    1    7   13\n\nA * B   # 行列の要素同士の積\n\n     [,1] [,2] [,3]\n[1,]   -4   -4   14\n[2,]   -6    0   24\n[3,]   -6    6   36\n\nA %*% B  # 行列の積\n\n     [,1] [,2] [,3]\n[1,]  -30    6   42\n[2,]  -39    6   51\n[3,]  -48    6   60\n\nB %*% A  # 行列の積\n\n     [,1] [,2] [,3]\n[1,]    0   -9  -18\n[2,]    6    6    6\n[3,]   12   21   30\n\n## AB と BA は異なる\nA %*% B == B %*% A  # 要素ごとに等しいかどうか比較する\n\n      [,1]  [,2]  [,3]\n[1,] FALSE FALSE FALSE\n[2,] FALSE  TRUE FALSE\n[3,] FALSE FALSE FALSE\n\na <- 1:3  # ベクトルを定義する\nA %*% a   # (3行3列) x (3行1列) なので結果は3行1列\n\n     [,1]\n[1,]   30\n[2,]   36\n[3,]   42\n\n\n行列の転置 (transpose) にはt()を使う。\n\nt(A)\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n\n\n逆行列はsolve()で求める。\n\nC <- matrix(c(2, 3, 5, \n              7, 11, 13,\n              17, 19, 23),\n            nrow = 3)\nsolve(C)\n\n            [,1]       [,2]        [,3]\n[1,] -0.07692308 -0.7692308  0.69230769\n[2,] -0.33333333  0.5000000 -0.16666667\n[3,]  0.20512821 -0.1153846 -0.01282051\n\n\n特異行列 (a singular matrix) にsolve() を使うとエラーになる。\n\nS <- matrix(1:9, nrow = 3)\nsolve(S)\n\nError in solve.default(S): Lapack routine dgesv: system is exactly singular: U[3,3] = 0\n\n\nエラーメッセージを読めば何がまずいのかわかるので、エラーが出たらエラーメッセージの中身をよく読むこと。 この場合は、行列が特異行列 (singular) であることを教えてくれている。"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "KUT 統計学2",
    "section": "",
    "text": "これは、高知工科大学 経済・マネジメント学群で開講されている「統計学2」（担当：矢内勇生）の講義用資料である。\n\n\n\nシラバス（講義要項）：PDF\n講義スライド\n\n各授業の後に最新版をアップロードする\n\n\n\n\n\n\n\n\n注意\n\n\n\n一般公開用のスライドでは一部の情報がカットされているので、正規受講生（単位を取得したい者）は KUTLMS で完全版を入手すること\n\n\n\nKUTLMS\n\n登録キーはポータルで通知する\n\n授業用のSlackグループ\n\n登録には大学ドメインのメールアドレスが必要\n\n\n\n\n\n\n\n\n浅野正彦, 矢内勇生. 2018.『Rによる計量政治学』オーム社（サポートページ）\n\n\n\n\n\n\n\n副読本：宋財泫, 矢内勇生 （執筆中）『私たちのR：ベストプラクティスの探求』(web book)\n\n\n\n\n\n授業の内容は、10のトピックに分かれている。シラバス (PDF) にはトピックごとの予習課題と参考文献が記載されている。 各トピックとこのウェブ資料の対応は以下の通りである。\n\n\n\nトピック\nウェブ資料\n\n\n\n\n1. イントロダクション\n\n\n\n2. Rの基本操作\nRの基本操作\n\n\n3. 記述統計とデータの可視化\nRStudio入門\n\n\n\n記述統計\n\n\n4. R Markdown によるレポート作成\nRマークダウンの使い方\n\n\n5. ggplot2 入門\nggplot2入門\n\n\n6. シミュレーション\n乱数生成\n\n\n\n中心極限定理\n\n\n7. 統計的推定と仮説検定の基礎\n統計的推定と仮説検定の基礎\n\n\n\n母集団と標本をシミュレーションで理解する\n\n\n8. 標本平均と母平均\nシミュレーションを利用して大数の法則を理解する\n\n\n\n標本分布を理解する\n\n\n\n母平均の推定\n\n\n9. \\(t\\) 分布と母平均の推定\n\\(t\\) 分布を利用した母平均の推定\n\n\n10. 2つの平均値を比較する\n統計的検定と平均値の比較"
  },
  {
    "objectID": "intro-to-RStudio.html",
    "href": "intro-to-RStudio.html",
    "title": "\n3  RStudio入門\n",
    "section": "",
    "text": "今回の目標"
  },
  {
    "objectID": "intro-to-RStudio.html#プロジェクトの作成",
    "href": "intro-to-RStudio.html#プロジェクトの作成",
    "title": "\n3  RStudio入門\n",
    "section": "\n3.1 プロジェクトの作成",
    "text": "3.1 プロジェクトの作成\nRStudio にはプロジェクト機能がある。この機能を使うと、プロジェクトの管理が容易になる。ここでは、「統計学2」をプロジェクトの1つと考え、新規プロジェクトを作成してみよう。\n以下のステップを踏めば、プロジェクトが作れる。\n\nコンピュータの自分のファイルが保存できる場所（たとえば、「ドキュメント」）に、この授業（統計学2）用のフォルダ（ディレクトリ； directory）を作る。\n\n\nフォルダ名はアルファベットと数字のみで付ける\nフォルダ名の最初の文字はアルファベットにする\nファルダ名にスペース（空白）を使わない!\nフォルダ名の例: stat2\n\n\n\n\n\n\n\n重要\n\n\n\n大学の情報演習室にあるパソコンを使っている場合は、Zドライブ にフォルダを作る。 授業で説明するので、説明をよく聞くように。説明がよくわからない場合は、担当教員またはSAにその場ですぐに質問しよう。\n\n\n\n上部のメニューで、File -> New Project を選ぶ\nExisting Directory（既存のディレクトリ）を選ぶ\nbrowse（閲覧）を押して、自分が作ったフォルダ（ディレクトリ）を選び、右下の Create Project をクリックする\n\nこれで新しいプロジェクトができる。プロジェクト名（自分で作ったフォルダの名前がそのまま使われる）は RStudioの右上に表示される。\n次回以降、このプロジェクトを開くには、File -> Open Project でこのプロジェクトを選べばよい。\n\n\n\n\n\n\n重要\n\n\n\n大学の情報演習室にあるパソコンを使っている場合は、Zドライブ 経由でプロジェクトを開く必要がある。授業で説明するので、説明をよく聞くように。わからなくなったら、担当教員またはSAにその場ですぐに質問しよう。"
  },
  {
    "objectID": "intro-to-RStudio.html#rスクリプトの作成と利用",
    "href": "intro-to-RStudio.html#rスクリプトの作成と利用",
    "title": "\n3  RStudio入門\n",
    "section": "\n3.2 Rスクリプトの作成と利用",
    "text": "3.2 Rスクリプトの作成と利用\nRのコマンド（命令文）は、RStudio 右側（あるいは左下）の Console に直接打ち込むこともできる。しかし、通常はそのような使い方はしない。代わりに、Rの命令が書かれたファイルを別に作り、その中に命令を記入する。\nRStudio で新しいRスクリプトを作るには、RStudioで 「Cmd/Ctrl + Shift + N」を入力する （あるいはRStudio 上部のメニューで、File -> New File -> R Script の順番で選ぶ）。そうすると、RStudio の左側のウィンドウが上下に2分割されるはずである。このとき、左上に新たに開くのがRスクリプトである。（左下が Hisotory の場合は、不要なので最小化する。左下 Console の場合はそのままにする）\nRスクリプトができたら、「Cmd/Ctrl + S」 を押し、名前をつけて保存しよう（名前の付け方はフォルダ名の付け方と同じルールで）。このファイルにRの命令を書き込む。基本的には、1つの行には1つの命令しか書かない。\nこのファイルに書いた命令を実行したいときは、実行したい行にカーソルをおいた状態で、「Cmd/Ctrl + Return/Enter」を押す。すると、命令がConsole に送られ、実行される。"
  },
  {
    "objectID": "intro-to-RStudio.html#コメントの利用",
    "href": "intro-to-RStudio.html#コメントの利用",
    "title": "\n3  RStudio入門\n",
    "section": "\n3.3 コメントの利用",
    "text": "3.3 コメントの利用\nRスクリプトには、Rに送る命令以外に、自分（あるいは他の人間）用のコメントを書き込むことができる。Rでコメントを書くときは、# （ハッシュ）という記号を使う。Rは、その行で # より後にあるものを無視する。\n\n\n\n\n\n\n注意\n\n\n\n# は半角！\n\n\nたとえば、以下の3行をRで実行すると、2行目と3行目は無視される。\n\na <- c(4, 5, 3, 4, 6, 7, 1, 2, 9)\n# a の標準偏差を求めたい\n# 標準偏差は英語では standard deviation; sd() という関数を使う\nsd(a)\n\n[1] 2.505549\n\n\n\n\n\n\n\n\nTip\n\n\n\n<- という記号は、「Option/Alt + - [マイナス] 」で入力する。\n\n\nスクリプトに命令だけ書いても、命令の意味を忘れてしまったり、自分がなぜその命令を書いたのか後でわからなくなったりするので、どんどんコメントを書き込もう。\n\n\n\n\n\n\n重要\n\n\n\nコメントは人の為ならず：コメントしておくことで、未来の自分に感謝される！"
  },
  {
    "objectID": "descriptive-stat.html",
    "href": "descriptive-stat.html",
    "title": "4  記述統計",
    "section": "",
    "text": "今回の目標"
  },
  {
    "objectID": "descriptive-stat.html#変数の記述統計とデータの可視化",
    "href": "descriptive-stat.html#変数の記述統計とデータの可視化",
    "title": "4  記述統計",
    "section": "4.1 1変数の記述統計とデータの可視化",
    "text": "4.1 1変数の記述統計とデータの可視化\n\n4.1.1 パッケージの読み込み\nまず、この授業で頻繁（ほぼ常に）に使う、tidyverseパッケージをインストールしよう。既にインストール済みなら、改めてインストールする必要はない。割と時間がかかるので注意。\n\n\n\n\n\n\n重要\n\n\n\n大学の情報演習室のパソコンを使っている場合は、パッケージをインストールしてはいけない。基本的なパッケージはインストール済みなので、さらにインストールすると同じパッケージが二箇所に存在することになり、トラブルのもとになる。稀に大学PCでもインストールが必要なパッケージがあるが、そのときは別途アナウンスする。\n\n\nパッケージのインストールには、install.packages() という関数を使う。パッケージをインストールするにはネット接続が必須。 パッケージは1度インストールすれば、Rのバージョンアップを行うまでそのまま使える。同じパッケージを何度もインストールしないように注意！（時間のムダ） 大学PCを使っている場合、以下のコードは実行しない（理由は上に書いたとおり）。\n\ninstall.packages(\"tidyverse\")\ninstall.packages(\"systemfonts\")\ninstall.packages(\"remotes\")\n\nただし、一部のパッケージは install.packages() 以外の方法でインストールする必要がある。この授業では必要になるたびに説明する。 今日はとりあえず次のコードを実行する。 このコードは、大学PCを利用している場合も実行する。\n\nremotes::install_github(\"Gedevan-Aleksizde/fontregisterer\", \n                        repos = NULL, \n                        type = \"source\")\n\nインストールが完了したら、library() でパッケージを読み込もう。パッケージの読み込みは、R (RStudio) を起動するたびに行う必要がある。つまり、library() はそのパッケージを使う場合には毎回実行する必要がある。また、複数の Rmd で同じパッケージを使う場合には、それぞれの Rmdファイルにlibrary() でパッケージを読み込む命令を書いておく必要がある。（Rmd ファイルについてはトピック5で説明する。）\n\nlibrary(tidyverse)\n\n図中の日本語が文字化けすることがあるので、OSに合わせてフォントを指定する以下のコードを実行する（RStudio Cloud の場合は回避策が面倒なので省略。Cloudユーザは 英語 [アルファベット] を使うように）。これは、library(tidyverse) の後に、毎回実行することが必要。（Linux ユーザは、自分の環境で使用可能なフォントを指定すること。）\nLinux ユーザ（IPAexフォント が利用可能である場合）は、\n\ntheme_set(theme_gray(base_size   = 9,\n                     base_family = \"IPAexGothic\"))\n\nを実行する。\nmacOS ユーザは、\n\ntheme_set(theme_gray(base_size   = 9,\n                     base_family = \"HiraginoSans-W3\"))\n\nを実行する。\nWindows ユーザ（大学PCを含む）は、\n\nlibrary(fontregisterer)\ntheme_set(theme_gray(base_size   = 9,\n                     base_family = \"Yu Gothic\"))\n\nを実行する。\n\n\n4.1.2 データセットの読み込み\nまず、今回の実習で利用するデータをダウンロードしよう。 準備として、現在利用しているプロジェクト（上で作ったフォルダ）の中に、data という名前のフォルダを作ろう。\n\ndir.create(\"data\")\n\n次にデータセット fake-data-01.csv をダウンロードし、今作った data フォルダの中に保存する。\n\ndownload.file(\n    url = \"http://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_data_01.csv\",\n    destfile = \"data/fake_data_01.csv\")\n\nダウンロードがうまくいかない（あるいは、次の読み込み段階で失敗する）場合は、ファイル (fake_data_01.csv) をここ から手動でダウンロードして、プロジェクト内の data ディレクトリに移動する。\n\n\n\n\n\n\n注意\n\n\n\n毎年、Windows ユーザの中に download.file() がうまくいく者とそうでない者がいる。原因がよくわからない（担当者はWindows を使わない）ので、今回うまくいかない場合は、次回以降も毎回手動でデータをダウンロードしてほしい。\n\n\nこのデータは CSVと呼ばれる形式で保存されているので、readr::read_csv()という関数を使ってこのデータセットを読み込むことができる（他の形式で保存されたデータの使い方は必要に応じて後の授業で解説する）。\nこのデータセットを myd という名前で利用することにしよう（これはデータセットのファイル名を変えるのではなく、R上での呼び名を決めているだけである）。\n\nmyd <- read_csv(\"data/fake_data_01.csv\")\n\n読み込んだデータの中身を確認してみよう。 次のコマンドを打ち込むと、スプレッドシート（Excelの表のようなもの）上にデータが表示される。\n\nView(myd)\n\n確認できたら、スプレッドシートのタブを閉じる。\n次に、コンソール上に、データセットの最上部または最下部にある数行分だけを表示してみよう。\n\nhead(myd)          # 行数を指定しないと6行分\n\n# A tibble: 6 × 6\n     id gender   age height weight  income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>   <dbl>\n1     1 male      52   174    63.1 3475810\n2     2 male      33   175.   70.2  457018\n3     3 male      22   175    82.6 1627793\n4     4 male      33   170.   81.8 6070642\n5     5 male      26   167.   51.2 1083052\n6     6 male      37   159.   57.8 2984929\n\ntail(myd, n = 8)   # 最後の8行分\n\n# A tibble: 8 × 6\n     id gender   age height weight   income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>    <dbl>\n1    93 female    61   159.   46.5  4025250\n2    94 female    60   166.   62.2  6300194\n3    95 female    21   165.   56.3  1339138\n4    96 female    65   161.   46.8  6127136\n5    97 female    45   161.   48.7  1062663\n6    98 female    53   166.   64.2 10154200\n7    99 female    43   158.   48.5  8287163\n8   100 female    48   154.   42    1125390\n\n\nデータセットに含まれる変数名を確認したいときは、\n\nnames(myd)\n\n[1] \"id\"     \"gender\" \"age\"    \"height\" \"weight\" \"income\"\n\n\nとする。\nデータセットに含まれる観測数 (n) と変数の数を知りたいときは、\n\ndim(myd)\n\n[1] 100   6\n\n\nとする。最初の数字がnの数（データセットの行数）、2番目の数字が変数の数（列数）である（RStudio を使うと、右上のウィンドウの”Environment” というタブにこの情報が既に表示されているので、そこで確認してもよい）。\nまた、データセットの確認には、glimpse() も便利である。\n\nglimpse(myd)\n\nRows: 100\nColumns: 6\n$ id     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …\n$ gender <chr> \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\",…\n$ age    <dbl> 52, 33, 22, 33, 26, 37, 50, 30, 62, 51, 55, 36, 66, 42, 36, 47,…\n$ height <dbl> 174.0, 175.3, 175.0, 170.1, 167.4, 159.3, 173.3, 162.5, 160.2, …\n$ weight <dbl> 63.1, 70.2, 82.6, 81.8, 51.2, 57.8, 68.6, 47.2, 68.2, 59.4, 66.…\n$ income <dbl> 3475810, 457018, 1627793, 6070642, 1083052, 2984929, 1481061, 1…\n\n\nデータセットに含まれるすべての変数の基本的な統計量を確認したいときは、\n\nsummary(myd)\n\n       id            gender               age            height     \n Min.   :  1.00   Length:100         Min.   :20.00   Min.   :148.0  \n 1st Qu.: 25.75   Class :character   1st Qu.:36.00   1st Qu.:158.1  \n Median : 50.50   Mode  :character   Median :45.00   Median :162.9  \n Mean   : 50.50                      Mean   :45.96   Mean   :163.7  \n 3rd Qu.: 75.25                      3rd Qu.:57.25   3rd Qu.:170.2  \n Max.   :100.00                      Max.   :70.00   Max.   :180.5  \n     weight          income        \n Min.   :28.30   Min.   :  240184  \n 1st Qu.:48.95   1st Qu.: 1343679  \n Median :59.95   Median : 2987818  \n Mean   :59.18   Mean   : 4343425  \n 3rd Qu.:67.33   3rd Qu.: 6072696  \n Max.   :85.60   Max.   :23505035  \n\n\nとする。\n\n\n4.1.3 基本的な統計量の計算\n基本的な統計量の計算方法を学習しよう。Rにはよく使われる統計量を計算するための関数があらかじめ用意されているので、関数を利用する。Rの関数の基本的な形は、関数名() である。この () の中に何を書くべきかは、関数によって異なる。Rの関数の使い方を身につけるためには、() の中身を適切に指定できるようになることが必要である。() の中身は関数の引数（ひきすう; arguments）と呼ばれる。\n\n\n\n\n\n\nNote\n\n\n\n引数には仮引数 (paramter) と実引数 (argument) という区別があるが、現時点では深入りしないことにする。気になる場合は、この説明 を参照されたい。\n\n\n私たちが利用しているデータセット myd に含まれる height（身長）という変数 (variable) の平均値（算術平均; mean）を求めよう。Rでは、mean(変数名)とすると、平均値が求められる。\nただし、height という変数は myd というデータの の一部（1つの変数, 1つの列）なので、それをRに伝える必要がある。データセットの中身の変数を使うときは、$ マークを使って、データセット名$変数名とすればよい。よって、height の平均値は\n\nmean(myd$height)\n\n[1] 163.746\n\n\nである。\n次に、身長の中央値 (median) を求めよう。中央値は median() で求められるので、\n\nmedian(myd$height)\n\n[1] 162.9\n\n\nである。\n続いて、身長の分散 (variance) を求めよう。分散（より正確には、不偏分散）は、var()で求める。したがって、\n\nvar(myd$height)\n\n[1] 59.16574\n\n\nである。\n今度は、標準偏差 (standard deviation) を求めよう。標準偏差は、sd() で計算できるので、\n\nsd(myd$height)\n\n[1] 7.691927\n\n\nである。また、標準偏差は分散の平方根 (square root) なので、sqrt() を使って、\n\nsqrt(var(myd$height))\n\n[1] 7.691927\n\n\nとしても、sd() を使った場合と同じ結果が得られる。\n次に、範囲 (range)を求めよう。最大値は max()、最小値は min() で求められるので、範囲は\n\nmax(myd$height) - min(myd$height)\n\n[1] 32.5\n\n\nである。range() という関数もあるが、この関数の結果は\n\nrange(myd$height)\n\n[1] 148.0 180.5\n\n\nとなり、区間が表示されるので注意が必要である。\n続いて、四分位範囲 (interquartile range; IQR) を求めよう。IQR() を使う。\n\nIQR(myd$height)\n\n[1] 12.075\n\n\nちなみに、第1四分位数すなわち25パーセンタイルは quantile() 関数を使って求めることができる。\n\n(q1 <- quantile(myd$height, prob = 0.25))\n\n  25% \n158.1 \n\n\n同様に第3四分位数すなわち75パーセンタイルは、\n\n(q3 <- quantile(myd$height, prob = 0.75))\n\n    75% \n170.175 \n\n\nである。第3四分位数から第1四分位数を引くと、\n\nq3 - q1\n\n   75% \n12.075 \n\n\nとなり、先ほどIQR()求めた四分位範囲と一致することが確認できる。\nquantile() を使うと、自分の好きなパーセンタイルを求めることができる。 例として、22パーセンタイルと77パーセンタイル、87パーセンタイルを同時に求めてみよう。\n\nquantile(myd$height, prob = c(0.22, 0.77, 0.87))\n\n    22%     77%     87% \n157.678 170.869 172.726 \n\n\nこれを使えば、身長 height の五数要約 (five-number summary) を表示することができる。次のようにすればよい。\n\nquantile(myd$height, prob = c(0, 0.25, 0.5, 0.75, 1))\n\n     0%     25%     50%     75%    100% \n148.000 158.100 162.900 170.175 180.500 \n\n\n五数要約のための関数 fivenum() を使うこともできる。\n\nfivenum(myd$height)\n\n[1] 148.00 158.10 162.90 170.25 180.50\n\n\n（一部の結果が四捨五入されていることを除けば）同じ結果が得られた。\n課題\n\n体重 (weight) について、平均値、中央値、分散、標準偏差、四分位範囲を求めよう。\n所得 (income) について、平均値、中央値、分散、標準偏差、四分位範囲を求めよう。\n\n\n\n4.1.4 変数の可視化\n変数の特徴は統計量によってある程度把握することができるが、統計量だけではわかりにくい特徴もある。そこで、データ分析を行う際には、図を作って自分が持っているデータを可視化するという作業が必要かつ重要である。\n今日は、ggplot2パッケージを使って、簡単な図をいくつか作ってみよう。ggplot2は先ほど読み込んだ tidyverse の一部なので、新たに読み込む必要はない。また、ggplot2の詳しい使い方は Topic 5 で解説するので、今日はコードの中身まで理解しなくてもよい。\nまず、最も基本的かつよく使う図であるヒストグラム　(histogram) を作ってみよう。 ggplot2では geom_histogram() でヒストグラムを作ることができる。\n例として、身長のヒストグラムを描いてみよう。\n\nhist_h <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\")\nplot(hist_h)\n\n\n\n\nこれでとりあえずヒストグラムが描ける。\nこのヒストグラムを元にして、様々なカスタマイズが可能である。例えば、横軸と縦軸のラベル (label) を変えたいときは、次のように labs()を加える。\n\nhist_h2 <- hist_h + \n    labs(x = \"身長 (cm)\", y = \"度数\")\nplot(hist_h2)\n\n\n\n\nバーの色を変えたいときは、geom_histogram() で fill を指定する。 指定可能な色については このページ を参照。\n\nhist_h3 <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\", fill = \"dodgerblue\") +\n  labs(x = \"身長 (cm)\", y = \"度数\")\nplot(hist_h3)\n\n\n\n\nヒストグラムのビン（棒）の幅は、binwidth で指定できる。\n\nhist_h4 <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\", \n                 fill = \"royalblue\", \n                 binwidth = 5) +\n  labs(x = \"身長 (cm)\", y = \"度数\")\nplot(hist_h4)\n\n\n\n\nヒストグラムの縦軸を度数 (frequency, count) ではなく確率密度 (probability density) に変えたいときは、y軸に after_stat(density) を指定する。\n\nhist_h5 <- ggplot(myd, aes(x = height, y = after_stat(density))) +\n  geom_histogram(color = \"black\", \n                 fill = \"dodgerblue\", \n                 binwidth = 5) +\n  labs(x = \"身長 (cm)\", y = \"確率密度\")\nprint(hist_h5)\n\n\n\n\n課題\n\n体重 (weight) のヒストグラム（色付き）を作り、日本語でラベルを付けよう。\n所得 (income) のヒストグラム（色付き）を作り、日本語でラベルを付けよう。"
  },
  {
    "objectID": "descriptive-stat.html#変数の記述統計とデータの可視化-1",
    "href": "descriptive-stat.html#変数の記述統計とデータの可視化-1",
    "title": "4  記述統計",
    "section": "4.2 2変数の記述統計とデータの可視化",
    "text": "4.2 2変数の記述統計とデータの可視化\n\n4.2.1 2つの量的変数の関係を図示する\n2つの量的変数の関係は、散布図 (scatter plot) で確認する。ここでは、身長 (height) と体重 (weight) の関係を図示してみよう。ggplot2では、geom_point() で散布図ができる。\n\nscat <- ggplot(myd, aes(x = height, y = weight)) +\n  geom_point() +\n  labs(x = \"身長 (cm)\", y = \"体重 (kg)\")\nplot(scat)\n\n\n\n\nこのデータセットに含まれる身長と体重の間には、どのような関係があるだろうか？\n\n\n4.2.2 2つの量的変数の関係を統計量で示す\n2つの量的変数の関係を表すのにもっともよく使われるのは、相関係数 (correlation coefficient) である。この統計量は、r で表されることが多い。-1 \\leq r \\leq 1となる。aとb という2つの変数があったとき、aが大きくなるほどb も大きくなるという関係があるとき、「aとbには正の相関 (positive correlation) がある」と言い、このとき r > 0 である。また、aが大きくなるほどb が小さくなるという関係があるとき、「aとbには負の相関 (negative correlation) がある」と言い、このとき r < 0 である。r = 0 のとき、「aとbは相関関係がない」と言う。\n正の相関があるとき、rが1に近いほど、その関係は強い。また、負の相関があるとき、rが-1に近いほど、その関係は強い。つまり、相関関係は、相関係数の絶対値が1に近いほど強い。\nRで相関係数を求めるときは、cor()を使う。身長と体重の相関係数は、\n\ncor(myd$height, myd$weight)\n\n[1] 0.7294207\n\n\nである。この2変数にはどんな関係があるだろうか？\n\n\n4.2.3 散布図と相関係数\n2つの量的な変数の関係を調べるときは、散布図と相関係数の両者を使ったほうがよい。\n散布図だけを使うと、本当は存在しない関係を、誤って見つけてしまうことがある。例えば、本当は相関がない2つの変数の散布図を描いたとき、描かれた点がなんとなく右肩上がりの直線の周りに集まっているように見えてしまうことがある。これは、人間がパタンを見つける能力に優れている（優れ過ぎている？）からだと考えられる。偶然できた壁のシミが人間の顔に見えてしまうことがあるというのも似たような現象である。\n散布図だけに頼ると、存在しないパタンが見えてしまうことがあるので、散布図で発見したパタンが本当にあるかどうか、相関係数を求めて確かめるべきである。\n反対に、相関係数だけに頼るのも危険である。相関係数は、2変数のあらゆる関係を捉えられるわけではない。相関係数が示すのは、2つの変数の直線的な関係だけである。\n例として、x とy という2つの変数を以下のとおり作り、相関係数を計算してみよう。\n\nx <- -10:10\ny <- x ^ 2\ncor(x, y)\n\n[1] -5.470844e-17\n\n\n2変数とxとyの相関係数は（ほぼ）0である。相関係数だけに頼ると、2つの変数の間には関係がないと言う結論が出せそうである。しかし、相関係数が低くても、必ず散布図を描いたほうがよい。散布図を作ってみよう。\n\nnewd <- tibble(x = x, y = y)\nscat2 <- ggplot(newd, aes(x = x, y = y)) +\n  geom_point()\nplot(scat2)\n\n\n\n\nこの図を見て、xとyは無関係と言えるだろうか？\n散布図から明らか（yをどのように作ったかを見ればもっと明らかだが）なように、xとyには強い関係がある（yはxの関数である）。しかし、その関係は曲線的 なので、直線的な関係しか捉えられない相関係数は、強い関係を見落としてしまうのである。\n\n\n\n\n\n\n重要\n\n\n\n2つの量的変数の関係を調べるときは、散布図と相関係数の両方を確認する習慣を身につけよう。"
  }
]