{
  "hash": "f5027965e8f56f957797ba3df62e60fb",
  "result": {
    "markdown": "# 記述統計\n\n**今回の目標**\n\n-   Rで基本的な統計量を求めてみよう！\n-   Rで作図する例を見てみよう！（今回は、作図コードの内容を理解しなくても良い）\n\n## 1変数の記述統計とデータの可視化 {#sec-1var}\n\n### パッケージの読み込み {#sec-pacs}\n\nまず、この授業で頻繁（ほぼ常に）に使う、**tidyverse**パッケージをインストールしよう。既にインストール済みなら、改めてインストールする必要はない。割と時間がかかるので注意。\n\n::: callout-important\n大学の情報演習室のパソコンを使っている場合は、パッケージをインストールしてはいけない。基本的なパッケージはインストール済みなので、さらにインストールすると同じパッケージが二箇所に存在することになり、トラブルのもとになる。大学PCにインストールしなければならないパッケージ（[CRAN](https://cran.r-project.org/)に登録されていないパッケージ）もある が、そのときは別途アナウンスする。\n:::\n\nパッケージのインストールには、`install.packages()` という関数を使う。**パッケージをインストールするにはネット接続が必須**。 パッケージは1度インストールすれば、Rのバージョンアップを行うまでそのまま使える。**同じパッケージを何度もインストールしないように注意！**（時間のムダ） **大学PCを使っている場合、以下のコードは実行しない**（理由は上に書いたとおり）。\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"tidyverse\")\ninstall.packages(\"systemfonts\")\ninstall.packages(\"shiny\")\ninstall.packages(\"miniUI\")\ninstall.packages(\"DT\")\ninstall.packages(\"patchwork\")\ninstall.packages(\"remotes\")\n```\n:::\n\n:::callout-tip\n手間を少し減らしたい場合は、\n\n::: {.cell}\n\n```{.r .cell-code}\npkgs <- c(\"tidyverse\", \n          \"sytemfonts\",\n          \"shiny\",\n          \"miniUI\",\n          \"DT\",\n          \"patchwork\",\n          \"remotes\")\ninstall.packages(pkgs)\n```\n:::\nのようにすればよい。\n:::\n\n\nただし、一部のパッケージは `install.packages()` 以外の方法でインストールする必要がある。この授業では必要になるたびに説明する。 今日はとりあえず次のコードを実行する（**大学PCでは実行しない！**)。\n\n::: {.cell}\n\n```{.r .cell-code}\nremotes::install_github(\"Gedevan-Aleksizde/fontregisterer\", \n                        repos = NULL, \n                        type = \"source\")\n```\n:::\n\n:::callout-tip\nRで利用可能なパッケージのうち、[CRAN (Comprehensive R Archive Network)](https://cran.r-project.org/) に登録されているものは、`install.packages()` でインストールする。\n\n上でインストールした [fontregisterer](https://github.com/Gedevan-Aleksizde/fontregisterer) のように、CRANには登録されていないが [GitHub](https://github.com/) で公開されているものは、`remotes::install_github()` または `devtools::install_github()` でインストールすることができる。\n:::\n\n\nインストールが完了したら、`library()` でパッケージを読み込もう。パッケージの読み込みは、R (RStudio) を起動するたびに行う必要がある。つまり、`library()` はそのパッケージを使う場合には毎回実行する必要がある。また、複数の Rmd で同じパッケージを使う場合には、それぞれの Rmdファイルに`library()` でパッケージを読み込む命令を書いておく必要がある（Rmd ファイルについては [5章](r-markdown.html) で説明する）。\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n図中の日本語が文字化けすることがあるので、OSに合わせてフォントを指定する以下のコードを実行する（RStudio Cloud の場合は回避策が面倒なので省略。Cloudユーザは 英語 \\[アルファベット\\] を使うように）。これは、`library(tidyverse)` の後に、**毎回実行する**ことが必要。（Linux ユーザは、自分の環境で使用可能なフォントを指定すること。）\n\nLinux ユーザ（[IPAexフォント](https://moji.or.jp/ipafont/) が利用可能である場合）は、\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fontregisterer)\ntheme_set(theme_gray(base_size = 9,\n                     base_family = \"IPAexGothic\"))\n```\n:::\n\nを実行する。\n\nmacOS ユーザは、\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fontregisterer)\ntheme_set(theme_gray(base_size = 9,\n                     base_family = \"Hiragino Sans\"))\n```\n:::\n\nを実行する。\n\nWindows ユーザ（大学PCを含む）は、\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(fontregisterer)\ntheme_set(theme_gray(base_size = 9,\n                     base_family = \"Yu Gothic\"))\n```\n:::\n\nを実行する。\n\n\n:::callout-note\n利用可能なフォントは、`library(fontregisterer)` を実行した後に、自分のOSにあわせて以下のいずれかを実行することで確認できる。\n\n::: {.cell}\n\n```{.r .cell-code}\n# Linux\nsystemfonts::system_fonts()$family\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# macOS\nnames(quartzFonts())\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Windows\nnames(windowsFonts())\n```\n:::\n\n:::\n\n\n### データセットの読み込み {#sec-datasets}\n\nまず、今回の実習で利用するデータをダウンロードしよう。 準備として、現在利用しているプロジェクト（上で作ったフォルダ）の中に、**data** という名前のフォルダを作ろう。\n\n::: {.cell}\n\n```{.r .cell-code}\ndir.create(\"data\")\n```\n:::\n\n次にデータセット [fake_data_01.csv](http://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_data_01.csv) をダウンロードし、今作った data フォルダの中に保存する。\n\n::: {.cell}\n\n```{.r .cell-code}\ndownload.file(\n  url = \"http://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_data_01.csv\",\n  destfile = \"data/fake_data_01.csv\")\n```\n:::\n\nダウンロードがうまくいかない（あるいは、次の読み込み段階で失敗する）場合は、ファイル (`fake_data_01.csv`) を[ここ](http://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_data_01.csv) から手動でダウンロードして、プロジェクト内の data ディレクトリに移動する。\n\n::: callout-warning\n毎年、Windows ユーザの中に `download.file()` がうまくいく者とそうでない者がいる。原因がよくわからない（担当者はWindows を使わない）ので、今回うまくいかない場合は、次回以降も毎回手動でデータをダウンロードしてほしい。\n:::\n\nこのデータは CSVと呼ばれる形式で保存されているので、`readr::read_csv()`という関数を使ってこのデータセットを読み込むことができる（他の形式で保存されたデータの使い方は必要に応じて後の授業で解説する）。\n\nこのデータセットを `myd` という名前で利用することにしよう（これはデータセットのファイル名を変えるのではなく、R上での呼び名を決めているだけである）。\n\n::: {.cell}\n\n```{.r .cell-code}\nmyd <- read_csv(\"data/fake_data_01.csv\")\n```\n:::\n\n読み込んだデータの中身を確認してみよう。 次のコマンドを打ち込むと、スプレッドシート（Excelの表のようなもの）上にデータが表示される。\n\n::: {.cell}\n\n```{.r .cell-code}\nView(myd)\n```\n:::\n\n確認できたら、スプレッドシートのタブを閉じる。\n\n次に、コンソール上に、データセットの最上部または最下部にある数行分だけを表示してみよう。\n\n::: {.cell}\n\n```{.r .cell-code}\nhead(myd)          # 行数を指定しないと6行分\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 6 × 6\n     id gender   age height weight  income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>   <dbl>\n1     1 male      52   174    63.1 3475810\n2     2 male      33   175.   70.2  457018\n3     3 male      22   175    82.6 1627793\n4     4 male      33   170.   81.8 6070642\n5     5 male      26   167.   51.2 1083052\n6     6 male      37   159.   57.8 2984929\n```\n:::\n\n```{.r .cell-code}\ntail(myd, n = 8)   # 最後の8行分\n```\n\n::: {.cell-output-stdout}\n```\n# A tibble: 8 × 6\n     id gender   age height weight   income\n  <dbl> <chr>  <dbl>  <dbl>  <dbl>    <dbl>\n1    93 female    61   159.   46.5  4025250\n2    94 female    60   166.   62.2  6300194\n3    95 female    21   165.   56.3  1339138\n4    96 female    65   161.   46.8  6127136\n5    97 female    45   161.   48.7  1062663\n6    98 female    53   166.   64.2 10154200\n7    99 female    43   158.   48.5  8287163\n8   100 female    48   154.   42    1125390\n```\n:::\n:::\n\nデータセットに含まれる変数名を確認したいときは、\n\n::: {.cell}\n\n```{.r .cell-code}\nnames(myd)\n```\n\n::: {.cell-output-stdout}\n```\n[1] \"id\"     \"gender\" \"age\"    \"height\" \"weight\" \"income\"\n```\n:::\n:::\n\nとする。\n\nデータセットに含まれる観測数 ($n$) と変数の数を知りたいときは、\n\n::: {.cell}\n\n```{.r .cell-code}\ndim(myd)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 100   6\n```\n:::\n:::\n\nとする。最初の数字が$n$の数（データセットの行数）、2番目の数字が変数の数（列数）である（RStudio を使うと、右上のウィンドウの\"Environment\" というタブにこの情報が既に表示されているので、そこで確認してもよい）。\n\nまた、データセットの確認には、`glimpse()` も便利である。\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(myd)\n```\n\n::: {.cell-output-stdout}\n```\nRows: 100\nColumns: 6\n$ id     <dbl> 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, …\n$ gender <chr> \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\", \"male\",…\n$ age    <dbl> 52, 33, 22, 33, 26, 37, 50, 30, 62, 51, 55, 36, 66, 42, 36, 47,…\n$ height <dbl> 174.0, 175.3, 175.0, 170.1, 167.4, 159.3, 173.3, 162.5, 160.2, …\n$ weight <dbl> 63.1, 70.2, 82.6, 81.8, 51.2, 57.8, 68.6, 47.2, 68.2, 59.4, 66.…\n$ income <dbl> 3475810, 457018, 1627793, 6070642, 1083052, 2984929, 1481061, 1…\n```\n:::\n:::\n\nデータセットに含まれるすべての変数の基本的な統計量を確認したいときは、\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(myd)\n```\n\n::: {.cell-output-stdout}\n```\n       id            gender               age            height     \n Min.   :  1.00   Length:100         Min.   :20.00   Min.   :148.0  \n 1st Qu.: 25.75   Class :character   1st Qu.:36.00   1st Qu.:158.1  \n Median : 50.50   Mode  :character   Median :45.00   Median :162.9  \n Mean   : 50.50                      Mean   :45.96   Mean   :163.7  \n 3rd Qu.: 75.25                      3rd Qu.:57.25   3rd Qu.:170.2  \n Max.   :100.00                      Max.   :70.00   Max.   :180.5  \n     weight          income        \n Min.   :28.30   Min.   :  240184  \n 1st Qu.:48.95   1st Qu.: 1343679  \n Median :59.95   Median : 2987818  \n Mean   :59.18   Mean   : 4343425  \n 3rd Qu.:67.33   3rd Qu.: 6072696  \n Max.   :85.60   Max.   :23505035  \n```\n:::\n:::\n\nとする。\n\n### 基本的な統計量の計算 {#sec-stats}\n\n基本的な統計量の計算方法を学習しよう。Rにはよく使われる統計量を計算するための関数があらかじめ用意されているので、関数を利用する。Rの関数の基本的な形は、`関数名()` である。この `()` の中に何を書くべきかは、関数によって異なる。Rの関数の使い方を身につけるためには、`()` の中身を適切に指定できるようになることが必要である。`()` の中身は関数の**引数（ひきすう; arguments）**と呼ばれる。\n\n::: callout-note\n引数には仮引数 (paramter) と実引数 (argument) という区別があるが、現時点では深入りしないことにする。気になる場合は、[この説明](http://www.cc.kyoto-su.ac.jp/~yamada/ap/parameter_argument.html) を参照されたい。\n:::\n\n私たちが利用しているデータセット `myd` に含まれる `height`（身長）という変数 (variable) の平均値（算術平均; mean）を求めよう。Rでは、`mean(変数名)`とすると、平均値が求められる。\n\nただし、`height` という変数は `myd` というデータの の一部（1つの変数, 1つの列）なので、それをRに伝える必要がある。データセットの中身の変数を使うときは、\\$ マークを使って、`データセット名$変数名`とすればよい。よって、height の平均値は\n\n::: {.cell}\n\n```{.r .cell-code}\nmean(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 163.746\n```\n:::\n:::\n\nである。\n\n次に、身長の中央値 (median) を求めよう。中央値は `median()` で求められるので、\n\n::: {.cell}\n\n```{.r .cell-code}\nmedian(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 162.9\n```\n:::\n:::\n\nである。\n\n続いて、身長の分散 (variance) を求めよう。分散（より正確には、不偏分散）は、`var()`で求める。したがって、\n\n::: {.cell}\n\n```{.r .cell-code}\nvar(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 59.16574\n```\n:::\n:::\n\nである。\n\n今度は、標準偏差 (standard deviation) を求めよう。標準偏差は、`sd()` で計算できるので、\n\n::: {.cell}\n\n```{.r .cell-code}\nsd(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 7.691927\n```\n:::\n:::\n\nである。また、標準偏差は分散の平方根 (square root) なので、`sqrt()` を使って、\n\n::: {.cell}\n\n```{.r .cell-code}\nsqrt(var(myd$height))\n```\n\n::: {.cell-output-stdout}\n```\n[1] 7.691927\n```\n:::\n:::\n\nとしても、`sd()` を使った場合と同じ結果が得られる。\n\n次に、範囲 (range)を求めよう。最大値は `max()`、最小値は `min()` で求められるので、範囲は\n\n::: {.cell}\n\n```{.r .cell-code}\nmax(myd$height) - min(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 32.5\n```\n:::\n:::\n\nである。`range()` という関数もあるが、この関数の結果は\n\n::: {.cell}\n\n```{.r .cell-code}\nrange(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 148.0 180.5\n```\n:::\n:::\n\nとなり、区間が表示されるので注意が必要である。\n\n続いて、四分位範囲 (interquartile range; IQR) を求めよう。`IQR()` を使う。\n\n::: {.cell}\n\n```{.r .cell-code}\nIQR(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 12.075\n```\n:::\n:::\n\nちなみに、第1四分位数すなわち25パーセンタイルは `quantile()` 関数を使って求めることができる。\n\n::: {.cell}\n\n```{.r .cell-code}\n(q1 <- quantile(myd$height, prob = 0.25))\n```\n\n::: {.cell-output-stdout}\n```\n  25% \n158.1 \n```\n:::\n:::\n\n同様に第3四分位数すなわち75パーセンタイルは、\n\n::: {.cell}\n\n```{.r .cell-code}\n(q3 <- quantile(myd$height, prob = 0.75))\n```\n\n::: {.cell-output-stdout}\n```\n    75% \n170.175 \n```\n:::\n:::\n\nである。第3四分位数から第1四分位数を引くと、\n\n::: {.cell}\n\n```{.r .cell-code}\nq3 - q1\n```\n\n::: {.cell-output-stdout}\n```\n   75% \n12.075 \n```\n:::\n:::\n\nとなり、先ほど`IQR()`求めた四分位範囲と一致することが確認できる。\n\n`quantile()` を使うと、自分の好きなパーセンタイルを求めることができる。 例として、22パーセンタイルと77パーセンタイル、87パーセンタイルを同時に求めてみよう。\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(myd$height, prob = c(0.22, 0.77, 0.87))\n```\n\n::: {.cell-output-stdout}\n```\n    22%     77%     87% \n157.678 170.869 172.726 \n```\n:::\n:::\n\nこれを使えば、身長 `height` の五数要約 (five-number summary) を表示することができる。次のようにすればよい。\n\n::: {.cell}\n\n```{.r .cell-code}\nquantile(myd$height, prob = c(0, 0.25, 0.5, 0.75, 1))\n```\n\n::: {.cell-output-stdout}\n```\n     0%     25%     50%     75%    100% \n148.000 158.100 162.900 170.175 180.500 \n```\n:::\n:::\n\n五数要約のための関数 `fivenum()` を使うこともできる。\n\n::: {.cell}\n\n```{.r .cell-code}\nfivenum(myd$height)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 148.00 158.10 162.90 170.25 180.50\n```\n:::\n:::\n\n（一部の結果が四捨五入されていることを除けば）同じ結果が得られた。\n\n**課題**\n\n-   体重 (weight) について、平均値、中央値、分散、標準偏差、四分位範囲を求めよう。\n-   所得 (income) について、平均値、中央値、分散、標準偏差、四分位範囲を求めよう。\n\n### 変数の可視化 {#sec-viz1}\n\n変数の特徴は統計量によってある程度把握することができるが、統計量だけではわかりにくい特徴もある。そこで、データ分析を行う際には、図を作って自分が持っているデータを可視化するという作業が必要かつ重要である。\n\n今日は、**ggplot2**パッケージを使って、簡単な図をいくつか作ってみよう。**ggplot2**は先ほど読み込んだ **tidyverse** の一部なので、新たに読み込む必要はない。また、**ggplot2**の詳しい使い方は Topic 5 で解説するので、今日はコードの中身まで理解しなくてもよい。\n\nまず、最も基本的かつよく使う図であるヒストグラム　(histogram) を作ってみよう。 ggplot2では `geom_histogram()` でヒストグラムを作ることができる。\n\n例として、身長のヒストグラムを描いてみよう。\n\n::: {.cell}\n\n```{.r .cell-code}\nhist_h <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\")\nplot(hist_h)\n```\n\n::: {.cell-output-display}\n![](descriptive-stat_files/figure-html/unnamed-chunk-33-1.png){width=480}\n:::\n:::\n\nこれでとりあえずヒストグラムが描ける。\n\nこのヒストグラムを元にして、様々なカスタマイズが可能である。例えば、横軸と縦軸のラベル (label) を変えたいときは、次のように `labs()`を加える。\n\n::: {.cell}\n\n```{.r .cell-code}\nhist_h2 <- hist_h + \n    labs(x = \"身長 (cm)\", y = \"度数\")\nplot(hist_h2)\n```\n\n::: {.cell-output-display}\n![](descriptive-stat_files/figure-html/unnamed-chunk-34-1.png){width=480}\n:::\n:::\n\nバーの色を変えたいときは、`geom_histogram()` で `fill` を指定する。 指定可能な色については [このページ](http://www.okadajp.org/RWiki/?%E8%89%B2%E8%A6%8B%E6%9C%AC) を参照。\n\n::: {.cell}\n\n```{.r .cell-code}\nhist_h3 <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\", fill = \"dodgerblue\") +\n  labs(x = \"身長 (cm)\", y = \"度数\")\nplot(hist_h3)\n```\n\n::: {.cell-output-display}\n![](descriptive-stat_files/figure-html/unnamed-chunk-35-1.png){width=480}\n:::\n:::\n\nヒストグラムのビン（棒）の幅は、`binwidth` で指定できる。\n\n::: {.cell}\n\n```{.r .cell-code}\nhist_h4 <- ggplot(myd, aes(x = height)) +\n  geom_histogram(color = \"black\", \n                 fill = \"royalblue\", \n                 binwidth = 5) +\n  labs(x = \"身長 (cm)\", y = \"度数\")\nplot(hist_h4)\n```\n\n::: {.cell-output-display}\n![](descriptive-stat_files/figure-html/unnamed-chunk-36-1.png){width=480}\n:::\n:::\n\nヒストグラムの縦軸を度数 (frequency, count) ではなく確率密度 (probability density) に変えたいときは、y軸に `after_stat(density)` を指定する。\n\n::: {.cell}\n\n```{.r .cell-code}\nhist_h5 <- ggplot(myd, aes(x = height, y = after_stat(density))) +\n  geom_histogram(color = \"black\", \n                 fill = \"dodgerblue\", \n                 binwidth = 5) +\n  labs(x = \"身長 (cm)\", y = \"確率密度\")\nprint(hist_h5)\n```\n\n::: {.cell-output-display}\n![](descriptive-stat_files/figure-html/unnamed-chunk-37-1.png){width=480}\n:::\n:::\n\n**課題**\n\n-   体重 (weight) のヒストグラム（色付き）を作り、日本語でラベルを付けよう。\n-   所得 (income) のヒストグラム（色付き）を作り、日本語でラベルを付けよう。\n\n## 2変数の記述統計とデータの可視化 {#sec-2var}\n\n### 2つの量的変数の関係を図示する {#sec-bivarviz}\n\n2つの量的変数の関係は、散布図 (scatter plot) で確認する。ここでは、身長 (height) と体重 (weight) の関係を図示してみよう。ggplot2では、`geom_point()` で散布図ができる。\n\n::: {.cell}\n\n```{.r .cell-code}\nscat <- ggplot(myd, aes(x = height, y = weight)) +\n  geom_point() +\n  labs(x = \"身長 (cm)\", y = \"体重 (kg)\")\nplot(scat)\n```\n\n::: {.cell-output-display}\n![](descriptive-stat_files/figure-html/scatter1-1.png){width=480}\n:::\n:::\n\nこのデータセットに含まれる身長と体重の間には、どのような関係があるだろうか？\n\n### 2つの量的変数の関係を統計量で示す {#sec-bivarstat}\n\n2つの量的変数の関係を表すのにもっともよく使われるのは、相関係数 (correlation coefficient) である。この統計量は、$r$ で表されることが多い。$-1 \\leq r \\leq 1$となる。$a$と$b$ という2つの変数があったとき、$a$が大きくなるほど$b$ も大きくなるという関係があるとき、「$a$と$b$には正の相関 (positive correlation) がある」と言い、このとき $r > 0$ である。また、$a$が大きくなるほど$b$ が小さくなるという関係があるとき、「$a$と$b$には負の相関 (negative correlation) がある」と言い、このとき $r < 0$ である。$r = 0$ のとき、「$a$と$b$は相関関係がない」と言う。\n\n正の相関があるとき、$r$が$1$に近いほど、その関係は強い。また、負の相関があるとき、$r$が$-1$に近いほど、その関係は強い。つまり、相関関係は、相関係数の絶対値が1に近いほど強い。\n\nRで相関係数を求めるときは、`cor()`を使う。身長と体重の相関係数は、\n\n::: {.cell}\n\n```{.r .cell-code}\ncor(myd$height, myd$weight)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 0.7294207\n```\n:::\n:::\n\nである。この2変数にはどんな関係があるだろうか？\n\n### 散布図と相関係数 {#sec-scatcor}\n\n2つの量的な変数の関係を調べるときは、散布図と相関係数の**両者**を使ったほうがよい。\n\n散布図だけを使うと、本当は存在しない関係を、誤って見つけてしまうことがある。例えば、本当は相関がない2つの変数の散布図を描いたとき、描かれた点がなんとなく右肩上がりの直線の周りに集まっているように見えてしまうことがある。これは、人間がパタンを見つける能力に優れている（優れ過ぎている？）からだと考えられる。偶然できた壁のシミが人間の顔に見えてしまうことがあるというのも似たような現象である。\n\n散布図だけに頼ると、存在しないパタンが見えてしまうことがあるので、散布図で発見したパタンが本当にあるかどうか、相関係数を求めて確かめるべきである。\n\n反対に、相関係数だけに頼るのも危険である。相関係数は、2変数のあらゆる関係を捉えられるわけではない。相関係数が示すのは、2つの変数の**直線的な関係だけ**である。\n\n例として、$x$ と$y$ という2つの変数を以下のとおり作り、相関係数を計算してみよう。\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- -10:10\ny <- x ^ 2\ncor(x, y)\n```\n\n::: {.cell-output-stdout}\n```\n[1] -5.470844e-17\n```\n:::\n:::\n\n2変数と$x$と$y$の相関係数は（ほぼ）0である。相関係数だけに頼ると、2つの変数の間には関係がないと言う結論が出せそうである。しかし、相関係数が低くても、必ず散布図を描いたほうがよい。散布図を作ってみよう。\n\n::: {.cell}\n\n```{.r .cell-code}\nnewd <- tibble(x = x, y = y)\nscat2 <- ggplot(newd, aes(x = x, y = y)) +\n  geom_point()\nplot(scat2)\n```\n\n::: {.cell-output-display}\n![](descriptive-stat_files/figure-html/plot-x-y-1.png){width=480}\n:::\n:::\n\nこの図を見て、$x$と$y$は無関係と言えるだろうか？\n\n散布図から明らか（$y$をどのように作ったかを見ればもっと明らかだが）なように、$x$と$y$には強い関係がある（$y$は$x$の関数である）。しかし、その関係は**曲線的** なので、**直線的な関係しか捉えられない相関係数**は、強い関係を見落としてしまうのである。\n\n::: callout-important\n2つの量的変数の関係を調べるときは、**散布図と相関係数の両方を確認する**習慣を身につけよう。\n:::",
    "supporting": [
      "descriptive-stat_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}