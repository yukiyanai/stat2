{
  "hash": "0962c1de1b7b14a1fabdf803b5ede28c",
  "result": {
    "markdown": "# Rの基本操作\n\nここでは、Rの基本的な使い方を解説する。RとRStudioのインストールについては、以下の資料を参照されたい。\n\n-   [Linux (Ubuntu) 編](https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf) (PDF, 4.6MB)\n-   [macOS 編](https://yukiyanai.github.io/jp/resources/docs/install-R_macOS.pdf) (PDF, 4.9MB)\n-   [Windows 編](https://yukiyanai.github.io/jp/resources/docs/install-R_windows.pdf) (PDF, 5.8MB)\n\n## Rの基礎\n\nRのコードはRのConsoleに直接入力してもいいし、スクリプトに保存してRから呼び出してもよい。スクリプトを使うときは、スクリプトファイルを**file_name.R** のように **.R** ファイルとして保存する。そして、RのConsole で `source(\"file_name.R\")` とすれば、スクリプト全体が実行される。\n\nRコマンドの区切りは改行である。改行すれば、1つのコマンドが終了したと認識される。\n\n::: {.cell}\n\n```{.r .cell-code}\n35 + 87\n```\n\n::: {.cell-output-stdout}\n```\n[1] 122\n```\n:::\n:::\n\nただし、括弧が閉じていなかったり、行末に二項演算子 (`+` や `*` など) があるときは、コマンドが次の行まで続いていると認識される。\n\n::: {.cell}\n\n```{.r .cell-code}\n35 +\n    87\n```\n\n::: {.cell-output-stdout}\n```\n[1] 122\n```\n:::\n:::\n\n1行に複数のコマンドを書きたいときは `;` で区切る。\n\n::: {.cell}\n\n```{.r .cell-code}\n35 + 87; 25 * 4\n```\n\n::: {.cell-output-stdout}\n```\n[1] 122\n```\n:::\n\n::: {.cell-output-stdout}\n```\n[1] 100\n```\n:::\n:::\n\n通常は、1行には1つのコマンドのみ書くようにしよう。\n\nRは大文字と小文字を区別する。したがって、`Var1` と `var1` は異なるモノ（変数、オブジェクト）として認識される。 変数名は英数字と`_` \\[アンダースコア\\] のみで構成するべきである（日本語も使えるが、トラブルの元なので避けるべき）。ただし、頭文字に数字は使えない。\n\nスペースは1つ以上ならいくつあっても1つのスペースがある場合と同じである。また、演算子の前後のスペースはあってもなくてもよい（コードの読み易さを考えてスペースの有無を決めること）。\n\n::: callout-important\nコード中のスペースは**半角**スペースでなければならない。日本語入力で使うスペースは全角スペースだが、全角スペースがあるとコードが正しく動作しないので要注意。プログラミングの際には日本語入力が「オフ」になっていることを確認しよう。\n:::\n\n`#` はコメントの開始として扱われる。 行頭に`#` を書くと、その行すべてがコメントとして扱われる。\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2 * 4  # 行頭からすべてコメント \n```\n:::\n\n行の途中に`#` を書くと、`#` 以降がコメントとして扱われる。\n\n::: {.cell}\n\n```{.r .cell-code}\n2 * 4  # これはコメント\n```\n\n::: {.cell-output-stdout}\n```\n[1] 8\n```\n:::\n:::\n\nコメントを書く作業は、コマンドを書く作業と同様に大切である。詳しくは授業で説明する。\n\nRに用意されている関数の使い方についてヘルプを参照したいときは`?関数名` （または`help(関数名)`)　とする。たとえば、平均値を求める関数 `mean()` のヘルプは、\n\n::: {.cell}\n\n```{.r .cell-code}\n?mean\n```\n:::\n\nで確認できる。ウェブブラウザでヘルプを参照したいときは、`help.start()` とする。\n\nインストール済みのパッケージを利用するときは、`library(パッケージ名)` とする。たとえば、**ggplot2** パッケージを使いたいなら、\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n```\n:::\n\nとする。パッケージをインストールする際は、`install.packages(\"パッケージ名\")` とする。その際、どのレポジトリからダウンロードするか尋ねられるので、自分に一番近いところ選ぶ。（パッケージをインストールする度にレポジトリを指定するのが面倒なら、`.Rprofile` であらかじめレポジトリを指定しておく。）\n\n### Rを電卓代わりに使う\n\nRは電卓の代わりとして使うことができる。 たとえば、\n\n::: {.cell}\n\n```{.r .cell-code}\n1 + 1       # 足し算\n```\n\n::: {.cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\n100 - 20    # 引き算\n```\n\n::: {.cell-output-stdout}\n```\n[1] 80\n```\n:::\n\n```{.r .cell-code}\n5 * 8       # 掛け算\n```\n\n::: {.cell-output-stdout}\n```\n[1] 40\n```\n:::\n\n```{.r .cell-code}\n2 / 3       # 割り算\n```\n\n::: {.cell-output-stdout}\n```\n[1] 0.6666667\n```\n:::\n\n```{.r .cell-code}\n2 ^ 3       # 累乗\n```\n\n::: {.cell-output-stdout}\n```\n[1] 8\n```\n:::\n\n```{.r .cell-code}\nsqrt(2)     # 平方根\n```\n\n::: {.cell-output-stdout}\n```\n[1] 1.414214\n```\n:::\n\n```{.r .cell-code}\n2 ^ (1 / 2) # sqrt(2) と同じ\n```\n\n::: {.cell-output-stdout}\n```\n[1] 1.414214\n```\n:::\n:::\n\nなどの計算ができる。 計算の順番を指定するときは、() で囲めばよい。\n\n::: {.cell}\n\n```{.r .cell-code}\n(5 * (2 + 1)) ^ 3  # (2 + 1) を最初に計算し、それに5を掛けてから最後に三乗する\n```\n\n::: {.cell-output-stdout}\n```\n[1] 3375\n```\n:::\n:::\n\n### 変数の利用\n\nRでは、変数（正確にはオブジェクト）を（ある程度）自由に作ることができる。 変数の名前は自由に決めてよい（ただし、数字から始まるものはだめ。また、`-` \\[ハイフン\\] はマイナスと区別できないので使えない）。 たとえば、\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\nb <- 2\n```\n:::\n\nとすると、`a`, `b` という2つの変数ができる。ここで `<-` は変数に値を割り当てることを意味する。 （`<-` の代わりに`=` を使うこともできるが混乱の元になるので、変数を定義するときは常に`<-` を使うことにする。）\n\n**`<-` はショートカットキーを使って入力する。**\n\n-   macOS: `option` + `-`（`option` キーと `-`\\[マイナス\\] キーを同時に押す）\n-   Windows: `Alt` + `-`（`Alt` キーと `-` \\[マイナス\\] キーを同時に押す）\n\nこうすることで、 `<-` だけでなく、その**前後に半角スペースが1つずつ挿入されるので便利**である。つまり、順番に\n\n1.  a\n2.  `option` + `-` または `Alt` + `-`\n3.  1\n\nと打つと\n\n::: {.cell}\n\n```{.r .cell-code}\na <- 1\n```\n:::\n\nと入力される。ショートカットキーを使わないと、\n\n1.  a\n2.  SPACE\n3.  \\<\n4.  \\-\n5.  SPACE\n6.  1\n\nと6段階の入力が必要になる。ショートカットキーを使うことで、これを3回に短縮できる。\n\n定義された変数名のみを入力して実行すると、変数の中身が表示される。\n\n::: {.cell}\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output-stdout}\n```\n[1] 1\n```\n:::\n\n```{.r .cell-code}\nb\n```\n\n::: {.cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\nこの変数は、計算に使える。\n\n::: {.cell}\n\n```{.r .cell-code}\na + b\n```\n\n::: {.cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\na - b\n```\n\n::: {.cell-output-stdout}\n```\n[1] -1\n```\n:::\n\n```{.r .cell-code}\na * b\n```\n\n::: {.cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\na / b\n```\n\n::: {.cell-output-stdout}\n```\n[1] 0.5\n```\n:::\n\n```{.r .cell-code}\nb ^ a\n```\n\n::: {.cell-output-stdout}\n```\n[1] 2\n```\n:::\n:::\n\nまた、\n\n::: {.cell}\n\n```{.r .cell-code}\nd <- a\na <- 3\n```\n:::\n\nとすると、$d = 1$, $a = 3$ となる（各自確かめること）。\n\nまた、変数名には日本語も使える。 たとえば、\n\n::: {.cell}\n\n```{.r .cell-code}\n変数1 <- 5\n変数2 <- 7\n変数1 * 変数2\n```\n\n::: {.cell-output-stdout}\n```\n[1] 35\n```\n:::\n:::\n\nとすることも可能である。しかし、変数名に日本語を使うと、（1）英語/日本語の切り替えが面倒であり、（2）文字化け等の予期せぬ問題が生じることがあるので、なるべく日本語の変数名は使わないほうが無難である。\n\n変数の割当と画面への出力を同時に行いたいときは、全体を `()` で囲む。\n\n::: {.cell}\n\n```{.r .cell-code}\n(d <- 3 * 5)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 15\n```\n:::\n:::\n\n変数を消去したいときは`rm()` 関数を使う。\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(d)\n```\n:::\n\n### ベクトルと行列\n\n#### ベクトル (vectors)\n\nRで特定のベクトル (vector) を作りたいときは、`c()` を（combine; 結合する）使う （上での変数を作るときに`c` という名前をスキップしたのは、この `c`という名前の関数があるためだった）。 たとえば、1, 2, 3, 4, 5 という5つの数字からなるベクトル **a** を作るには、\n\n::: {.cell}\n\n```{.r .cell-code}\na <- c(1, 2, 3, 4, 5)\n```\n:::\n\nとする。このベクトルを画面に表示すると、\n\n::: {.cell}\n\n```{.r .cell-code}\na\n```\n\n::: {.cell-output-stdout}\n```\n[1] 1 2 3 4 5\n```\n:::\n:::\n\nとなる。\n\nベクトルの中身は文字列でもかまわない。 たとえば、\n\n::: {.cell}\n\n```{.r .cell-code}\nuniv_kochi <- c(\"KUT\", \"University of Kochi\", \"Kochi University\")\n```\n:::\n\nとすれば、文字列 (characters) のベクトルができる。 このように、文字列は引用符（`''` でも`\"\"` でもよい）で囲む。\n\nひとつひとつの要素を指定する代わりに、様々な方法でベクトルを作ることが可能である。 たとえば、`seq()` 関数（sequence; 数列）を使うと、一連の数字からなるベクトルを作ることができる。\n\n::: {.cell}\n\n```{.r .cell-code}\nseq(1, 20, by = 1)   # 1から20までの整数。1:20 でも同じ\n```\n\n::: {.cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n```\n:::\n\n```{.r .cell-code}\nseq(1, 20, by = 2)   # 1から19までの奇数\n```\n\n::: {.cell-output-stdout}\n```\n [1]  1  3  5  7  9 11 13 15 17 19\n```\n:::\n\n```{.r .cell-code}\nseq(2, 20, by = 2)   # 2から20までの偶数\n```\n\n::: {.cell-output-stdout}\n```\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n:::\n\n```{.r .cell-code}\nseq(20, 1, by = -5)  # 降順、間隔は5\n```\n\n::: {.cell-output-stdout}\n```\n[1] 20 15 10  5\n```\n:::\n\n```{.r .cell-code}\nseq(1, 100, length.out = 10) # 最小値が1、最大値が100で、要素の数 (length) が10のベクトル\n```\n\n::: {.cell-output-stdout}\n```\n [1]   1  12  23  34  45  56  67  78  89 100\n```\n:::\n:::\n\n`seq(x, y, by = 1)` の場合はより単純に `x : y`とすればよい。\n\n::: {.cell}\n\n```{.r .cell-code}\n1 : 20\n```\n\n::: {.cell-output-stdout}\n```\n [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20\n```\n:::\n:::\n\nまた、`rep()`関数（replicate; 複製する）も便利である。\n\n::: {.cell}\n\n```{.r .cell-code}\nrep(3, 10)   # 3が10個のベクトル\n```\n\n::: {.cell-output-stdout}\n```\n [1] 3 3 3 3 3 3 3 3 3 3\n```\n:::\n\n```{.r .cell-code}\nrep(c('a', 'b', 'c'), c(3, 1, 2))  # aが3つ, bが1つ, cが2つのベクトル\n```\n\n::: {.cell-output-stdout}\n```\n[1] \"a\" \"a\" \"a\" \"b\" \"c\" \"c\"\n```\n:::\n:::\n\nベクトルの$i$番目の要素にアクセスするには`ベクトル名[i]`とする。 同時に複数の要素を取り出すこともできる。 たとえば、\n\n::: {.cell}\n\n```{.r .cell-code}\na <- seq(10, 100, length.out = 10)\nb <- 10:1\na[2]\n```\n\n::: {.cell-output-stdout}\n```\n[1] 20\n```\n:::\n\n```{.r .cell-code}\nb[2]\n```\n\n::: {.cell-output-stdout}\n```\n[1] 9\n```\n:::\n\n```{.r .cell-code}\na[3:5]\n```\n\n::: {.cell-output-stdout}\n```\n[1] 30 40 50\n```\n:::\n\n```{.r .cell-code}\na[c(1,3,5)]\n```\n\n::: {.cell-output-stdout}\n```\n[1] 10 30 50\n```\n:::\n\n```{.r .cell-code}\na[c(8, 2, 4)]\n```\n\n::: {.cell-output-stdout}\n```\n[1] 80 20 40\n```\n:::\n:::\n\n#### ベクトルの演算\n\nRでは、ベクトルを使った演算が可能である。 たとえば、次のような計算ができる。\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1 : 10\nx + 10    # ベクトルxの各要素に10を加える\n```\n\n::: {.cell-output-stdout}\n```\n [1] 11 12 13 14 15 16 17 18 19 20\n```\n:::\n\n```{.r .cell-code}\nx - 5     # ベクトルxの各要素から5を引く\n```\n\n::: {.cell-output-stdout}\n```\n [1] -4 -3 -2 -1  0  1  2  3  4  5\n```\n:::\n\n```{.r .cell-code}\nx * 2     # ベクトルxの各要素に2をかける\n```\n\n::: {.cell-output-stdout}\n```\n [1]  2  4  6  8 10 12 14 16 18 20\n```\n:::\n\n```{.r .cell-code}\nx / 3     # ベクトルxの各要素を3で割る\n```\n\n::: {.cell-output-stdout}\n```\n [1] 0.3333333 0.6666667 1.0000000 1.3333333 1.6666667 2.0000000 2.3333333\n [8] 2.6666667 3.0000000 3.3333333\n```\n:::\n\n```{.r .cell-code}\nx ^ 2     # ベクトルxの各要素を2乗する\n```\n\n::: {.cell-output-stdout}\n```\n [1]   1   4   9  16  25  36  49  64  81 100\n```\n:::\n\n```{.r .cell-code}\nsqrt(x)   # ベクトルxの各要素の平方根（square root）を計算する\n```\n\n::: {.cell-output-stdout}\n```\n [1] 1.000000 1.414214 1.732051 2.000000 2.236068 2.449490 2.645751 2.828427\n [9] 3.000000 3.162278\n```\n:::\n:::\n\nまた、複数のベクトルを使って、次のような計算ができる。\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:10\ny <- -10:-1\n\n# xのi番目の要素とyのi番目の要素を足す（i = 1, 2, ..., 10）\nx + y\n```\n\n::: {.cell-output-stdout}\n```\n [1] -9 -7 -5 -3 -1  1  3  5  7  9\n```\n:::\n\n```{.r .cell-code}\n# xのi番目の要素からyのi番目の要素を引く（i = 1, 2, ..., 10）\nx - y\n```\n\n::: {.cell-output-stdout}\n```\n [1] 11 11 11 11 11 11 11 11 11 11\n```\n:::\n\n```{.r .cell-code}\n# xのi番目の要素とyのi番目の要素をかける（i = 1, 2, ..., 10）\nx * y\n```\n\n::: {.cell-output-stdout}\n```\n [1] -10 -18 -24 -28 -30 -30 -28 -24 -18 -10\n```\n:::\n\n```{.r .cell-code}\n# xのi番目の要素をyのi番目の要素で割る（i = 1, 2, ..., 10）\nx / y\n```\n\n::: {.cell-output-stdout}\n```\n [1]  -0.1000000  -0.2222222  -0.3750000  -0.5714286  -0.8333333  -1.2000000\n [7]  -1.7500000  -2.6666667  -4.5000000 -10.0000000\n```\n:::\n\n```{.r .cell-code}\n# xのi番目の要素を「yのi番目の要素」乗にする（i = 1, 2, ..., 10）\nx ^ y\n```\n\n::: {.cell-output-stdout}\n```\n [1] 1.000000e+00 1.953125e-03 1.524158e-04 6.103516e-05 6.400000e-05\n [6] 1.286008e-04 4.164931e-04 1.953125e-03 1.234568e-02 1.000000e-01\n```\n:::\n:::\n\nベクトル同士の足し算（引き算）をしても、ベクトルの長さは変わらない。\n\n::: {.cell}\n\n```{.r .cell-code}\nlength(x)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nlength(y)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 10\n```\n:::\n\n```{.r .cell-code}\nlength(x + y)\n```\n\n::: {.cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n長さの異なるベクトルを使って演算を行うと、短いのほうのベクトルは要素をリサイクルして対応する。\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1 : 10\ny <- c(100, 200)\nx + y\n```\n\n::: {.cell-output-stdout}\n```\n [1] 101 202 103 204 105 206 107 208 109 210\n```\n:::\n:::\n\nただし、長いほうのベクトルの長さが短いほうのベクトルの長さの整数倍になっていないときは、警告 (warning) が出る。\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1 : 10\ny <- c(100, 200, 300)\nx + y\n```\n\n::: {.cell-output-stderr}\n```\nWarning in x + y: longer object length is not a multiple of shorter object\nlength\n```\n:::\n\n::: {.cell-output-stdout}\n```\n [1] 101 202 303 104 205 306 107 208 309 110\n```\n:::\n:::\n\n2つのベクトルの内積 (dot product) は`%*%` で、直積 (outer product) は`%o%` または`outer()` で求められる。\n\n``` {r{}\nx <- c(1, 3, 5)\ny <- c(10, 20, 30)\nx %*% y      # xとyの内積\nx %o% y      # xとyの直積\nouter(x, y)  # xとyの直積\n```\n\n<br>\n\n#### 行列 (matrices)\n\nRで行列を作るには、`matrix()`関数を使う。 たとえば、\n\n::: {.cell}\n\n```{.r .cell-code}\n(A <- matrix(1:9, nrow = 3, byrow = TRUE))\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n:::\n\n```{.r .cell-code}\n(B <- matrix(1:9, nrow = 3, byrow = FALSE))\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    4    7\n[2,]    2    5    8\n[3,]    3    6    9\n```\n:::\n:::\n\nのようにする。 ここで、行列Aと行列Bの違いに注目する。 要素全体をひとつの集合としてみると、AとBの行列は全く同じである。 これは、上のコードでは`1:9`という部分が同じだからである。 しかし、要素の並び方が異なる。 Aを作ったコードは`byrow = TRUE`となっている。 これは、行 (row) 単位でセルを埋めて行くということである。 それに対し、Bでは`byrow = FALSE` となっている。 これは行単位でセルを埋めない（したがって、列 \\[col\\] 単位で埋める）ということを意味する。 この違いが、AとBの違いを生み出している。 行列を作るときは行数 `nrow` と列数 `ncol` を指定するが、要素の合計数が決まっているときは、どちらか一方を指定すれば、もう一方は自動的に決められる。 上の例では、要素の数が9で、行の数に3を指定したので、列の数は自動的に 9 / 3 = 3 になっている。\n\n行列の各行と各列にはそれぞれ名前を付けることができる。\n\n::: {.cell}\n\n```{.r .cell-code}\nrow.names(A) <- c('row1', 'row2', 'row3')  # 各行に名前をつける\ncolnames(A) <- c('col1', 'col2', 'col3')   # 各列に名前をつける\nA\n```\n\n::: {.cell-output-stdout}\n```\n     col1 col2 col3\nrow1    1    2    3\nrow2    4    5    6\nrow3    7    8    9\n```\n:::\n:::\n\n`row.names()`には `.` があり、`colnames()`にはそれがないことに注意。\n\n行列の$i$行$j$列を取り出すには、`行列名[i, j]`とする。 例えば\n\n::: {.cell}\n\n```{.r .cell-code}\nA[1, 3]          # 第1行、第3列の要素を取り出す\n```\n\n::: {.cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nA[2, c(1, 3)]    # 第2行で、第1列と第3列の要素を取り出す\n```\n\n::: {.cell-output-stdout}\n```\ncol1 col3 \n   4    6 \n```\n:::\n\n```{.r .cell-code}\nA[3, ]           # 第3行の要素をすべて取り出す\n```\n\n::: {.cell-output-stdout}\n```\ncol1 col2 col3 \n   7    8    9 \n```\n:::\n\n```{.r .cell-code}\nA[, 2]           # 第2列の要素をすべて取り出す\n```\n\n::: {.cell-output-stdout}\n```\nrow1 row2 row3 \n   2    5    8 \n```\n:::\n:::\n\n#### 行列の演算\n\nRでは行列を使った計算ができる。\n\n基本的な演算の結果は次のとおりである。\n\n::: {.cell}\n\n```{.r .cell-code}\nA <- matrix(1:9, ncol = 3)   　# 行列Aを定義する\nB <- matrix(-4:4, ncol = 3)    # 行列Bを定義する\nA + 3   # 行列の各要素に3を加える\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    4    7   10\n[2,]    5    8   11\n[3,]    6    9   12\n```\n:::\n\n```{.r .cell-code}\n2 * A   # 行列の各要素を2倍する\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    2    8   14\n[2,]    4   10   16\n[3,]    6   12   18\n```\n:::\n\n```{.r .cell-code}\nA + B   # Aのi行j列要素とBのi行j列要素を足す (i, j = 1, 2, 3)\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   -3    3    9\n[2,]   -1    5   11\n[3,]    1    7   13\n```\n:::\n\n```{.r .cell-code}\nA * B   # 行列の要素同士の積\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]   -4   -4   14\n[2,]   -6    0   24\n[3,]   -6    6   36\n```\n:::\n\n```{.r .cell-code}\nA %*% B  # 行列の積\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]  -30    6   42\n[2,]  -39    6   51\n[3,]  -48    6   60\n```\n:::\n\n```{.r .cell-code}\nB %*% A  # 行列の積\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    0   -9  -18\n[2,]    6    6    6\n[3,]   12   21   30\n```\n:::\n\n```{.r .cell-code}\n## AB と BA は異なる\nA %*% B == B %*% A  # 要素ごとに等しいかどうか比較する\n```\n\n::: {.cell-output-stdout}\n```\n      [,1]  [,2]  [,3]\n[1,] FALSE FALSE FALSE\n[2,] FALSE  TRUE FALSE\n[3,] FALSE FALSE FALSE\n```\n:::\n\n```{.r .cell-code}\na <- 1:3  # ベクトルを定義する\nA %*% a   # (3行3列) x (3行1列) なので結果は3行1列\n```\n\n::: {.cell-output-stdout}\n```\n     [,1]\n[1,]   30\n[2,]   36\n[3,]   42\n```\n:::\n:::\n\n行列の転置 (transpose) には`t()`を使う。\n\n::: {.cell}\n\n```{.r .cell-code}\nt(A)\n```\n\n::: {.cell-output-stdout}\n```\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n[3,]    7    8    9\n```\n:::\n:::\n\n逆行列は`solve()`で求める。\n\n::: {.cell}\n\n```{.r .cell-code}\nC <- matrix(c(2, 3, 5, \n              7, 11, 13,\n              17, 19, 23),\n            nrow = 3)\nsolve(C)\n```\n\n::: {.cell-output-stdout}\n```\n            [,1]       [,2]        [,3]\n[1,] -0.07692308 -0.7692308  0.69230769\n[2,] -0.33333333  0.5000000 -0.16666667\n[3,]  0.20512821 -0.1153846 -0.01282051\n```\n:::\n:::\n\n特異行列 (a singular matrix) に`solve()` を使うとエラーになる。\n\n::: {.cell}\n\n```{.r .cell-code}\nS <- matrix(1:9, nrow = 3)\nsolve(S)\n```\n\n::: {.cell-output-error}\n```\nError in solve.default(S): Lapack routine dgesv: system is exactly singular: U[3,3] = 0\n```\n:::\n:::\n\nエラーメッセージを読めば何がまずいのかわかるので、**エラーが出たらエラーメッセージの中身をよく読む**こと。 この場合は、行列が特異行列 (singular) であることを教えてくれている。",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": [],
    "engineDependencies": {},
    "preserve": {},
    "postProcess": null
  }
}