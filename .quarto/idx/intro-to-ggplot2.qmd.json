{"title":"ggplot2 入門","markdown":{"headingText":"ggplot2 入門","containsRefs":false,"markdown":"\n**今回の目標**\n\n-   ggplot2 で作図する方法を覚えよう！\n\n## 準備 {#sec-prep6}\n\n今回利用するパッケージを読み込もう。**ggplot2** は **tidyverse** に含まれているので、`library()` で **tidyverse** を読み込めばよい。パッケージをインストール済みでない場合は、読み込みの前にまず`install.packages()` でインストールする。\n\n```{r}\n#| message: false\n\n#install.packages(\"tidyverse\", dependencies = TRUE)\nlibrary(tidyverse)\n```\n\n## データフレーム {#sec-dataframe}\n\nggplot2 で図を作るためには、**データフレーム (data frame)** と呼ばれる形式のデータが必要である。 そこで、まずデータフレームについて説明する。\n\n### CSVデータの読み込み {#sec-csv}\n\nCSV形式で保存されたデータセットをもっているなら、`readr::read_csv()` や `read.csv()` などでそのデータを読み込めば、データフレームができる。\n\n::: callout-note\n**readr** パッケージも tidyverse に含まれているので、tidyverse を読み込み済みならあらためて `librar(readr)` を実行する必要はない。 このように、tidyverse はデータ分析でよく使うツールをまとめて提供しており、便利である。 詳しくは、『私たちのR』「[データハンドリング](http://www.jaysong.net/RBook/datahandling1.html)」 を参照されたい。\n:::\n\n例として、これまでの授業でも使った [fake_data_01.csv](http://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_data_01.csv) を読み込んでみよう。プロジェクト内の data ディレクトリ（フォルダ）に `fake_data_01.csv` があることを想定している。\n\n```{r}\n#| message: false\nmyd <- read_csv(\"data/fake_data_01.csv\")\n```\n\nこれがデータフレームかどうか確かめるために、`is.data.frame()` を使う。\n\n```{r}\nis.data.frame(myd)\n```\n\n**TRUE** （真）という答えが返され、myd がデータフレームであることがわかる。\n\nデータフレームの中身は、`tibble::glimpse()` で確認できる。\n\n```{r}\nglimpse(myd)\n```\n\n`id`, `gender`, `age`, `height`, `weight`, `income` という6つの変数があり、`gender` が <chr> すなわち文字列 (character) 型で、他の変数はすべて <dbl> すなわち実数 (double \\[double-precision floating-point\\]) 型であることがわかる。\n\nデータフレームの中身を確認する方法は他にもいくつかある。 `View()` を使うと、表計算ソフトのスプレッドシートと同じように、データを表形式で表示してくれる。 Souce ペインに表示されるので確認が終わったらタブを閉じるようにしよう。 **この関数は R Markdown ファイルではなく、Console に直接入力**したほうが良い。\n\n::: callout-tip\n`View()` や `help()` のように、RStudio でインタラクティブに（マウスを使って）操作することを想定するコマンドは、Console に直接書き込むようにする。また、繰り返し使わないコマンド（例：`install.packages()` ）も R マークダウンに記録するのではなく、Consoleに書き込もう。\n:::\n\n```{r}\n#| eval: false\nView(myd)\n```\n\nひとつひとつの変数が列（縦方向の並び）を構成し、観測個体が行（横方向の並び）を構成していることがわかる。 `View()` の代わりに、RStudio の右下のペインにある **Environment** タフで、**Data** という項目に表示されているデータの右端にあるボタンを押して、データを表示することもできる。\n\nデータフレームの各列の名前（つまり、変数名）を知りたいときは、`names()` を使う。\n\n```{r}\nnames(myd)\n```\n\nこれで、どのような名前で変数が記録されているかがわかる。\n\nこの例では変数が6つしかないので自分で変数の数を数えるのも容易である。しかし、変数の数が多い場合には、自分で数えるのは面倒だ。そのようなときは、`ncol()` を使う（ncol は the <u>n</u>umber of <u>col</u>umns \\[列の数\\] の略である）。\n\n```{r}\nncol(myd)\n```\n\nこれで、`myd` には変数が6つあることがわかる。\n\nまた、データに含まれる観測個体の数は、`nrow()` で確かめることができる (the <u>n</u>umber of <u>row</u>s \\[行の数\\] の略である）。\n\n```{r}\nnrow(myd)\n```\n\n`myd` は100行あることがわかる。\n\n`dim()` を使えば、行数と列数を1度に調べることができる。\n\n```{r}\ndim(myd)\n```\n\n実は、行数と列数は、上で`glimpse(myd)` を実行したときにも表示されていた。\n\nデータの先頭の数行を表示して変数の中身を確認したいときは、`head()` を使う。\n\n```{r}\nhead(myd)\n```\n\nこのように、デフォルトでは最初の6行が表示される。表示する行数は、自分で指定できる。引数 `n`を使う。\n\n```{r}\nhead(myd, n = 4)\n```\n\n同様に、データの末尾は `tail()` で表示できる。\n\n```{r}\ntail(myd, n = 5)\n```\n\nデータの中身をさらに詳しく知りたい場合には、`str()` (<u>str</u>ucture) を使う。\n\n```{r}\nstr(myd)\n```\n\nこの情報はR初心者にはわかりにくいと思われるので、最初は `glimpse()` を使った方がいいだろう。\n\nデータセットをRに読み込んだら、`glimpse()` をはじめとするさまざまな関数を使って、データの中身を確認する習慣を身につけよう。\n\n### データフレームの作成 {#sec-makedf}\n\nデータフレームは、`data.frame()` を使ってRで作ることもできる。データフレームの代わりに**tibble** と呼ばれる形式のデータを使うこともできる。tibble は、`tibble::tibble()` で作れる。\n\n練習のために、df1という名前のデータフレーム (data.frame) と、df2という名前のtibble を作ってみよう。まず、x とy という2つの変数をもつ `df1` を作る。\n\n```{r}\ndf1 <- data.frame(x = 1:100, \n                  y = 100:1)\nis.data.frame(df1)\n```\n\nこのデータの中身を確認してみよう。\n\n```{r}\nglimpse(df1)\n```\n\n`x` と `y` という変数があり、それぞれが <int> すなわち整数 (integer) 型であることがわかる。また、データは100行2列である。\n\n次に、v1, v2, v3 という3つの変数をもつ df2 を `tibble()` で作る。`rnorm(n, mean, sd)` で、平均が`mean`、標準偏差が`sd` の正規分布から `n` 個の乱数を生成することができる（詳しくは、「シミュレーション」の回に説明する）。\n\n```{r}\ndf2 <- tibble(v1 = rnorm(100, mean =  0, sd = 5),\n              v2 = rnorm(100, mean = -4, sd = 5),\n              v3 = rnorm(100, mean =  0, sd = 1))\nis.data.frame(df2)\n```\n\n`df2` の中身を確認しておこう。\n\n```{r}\nglimpse(df2)\n```\n\n`v1`, `v2`, `v3` という3つの変数があり、それぞれが <dbl> すなわち実数型であることがわかる。このデータフレームは100行3列である。\n\n::: callout-note\n<dbl> というのは、double precision floating point number type（倍精度浮動小数点数型）のことである。この授業で必要な範囲では、実数 (real number) であると考えて差し支えない。この他に授業で出てくる変数の型は、\n\n-   <int>: integer（整数型）\n-   <lgl>: logical（論理型）\n-   <chr>: character（文字列型）\n-   <fct>: factor（因子型）\n\nそれぞれ登場したときに必要な範囲で説明するが、詳しくは「プログラミング」の授業で勉強してほしい。\n:::\n\nこのように、`data.frame()` と `tibble()` を使って、df1とdf2のという \"data.frame\" （データフレーム）を作ることができた。基本的にはどちらの方法でデータフレームを作っても良いが、特に`data.frame()` のほうを好む理由がなければ、今後は `tibble()` でデータフレーム (tibble) を作ろう。（tibble を優先する理由の説明は割愛するが、**Consoleに直接** `df1` \\[これは data.frame である\\] と入力して実行した結果と、 同じく `df2`\\[これは tibble である\\] と入力して実行した結果を比べると、tibble のほうが良い理由の1つがわかるだろう。）\n\n### 組み込みデータ {#sec-builtindata}\n\nRにはあらかじめいくつかの（多くの！）データフレームが用意されている。たとえば、自動車に関するデータセットである**mtcars**というものがある。このデータは、`data()` で呼び出すことができる。\n\n```{r}\ndata(mtcars)\n```\n\nこれを実行すると、RStudio 右下ペインの **Environement** タブの中で、**Values** という項目のところに、`mtcars` が表示されるはずだ。この中身を確認してみよう。\n\n```{r}\nglimpse(mtcars)\n```\n\n32行11列のデータであることがわかる。この時点で、 **Environement** タブの中で **Data** 項目の中に mtcars が移動し、データフレームとして認識されていることがわかる。念のために確認しておこう。\n\n```{r}\nis.data.frame(mtcars)\n```\n\nこのデータの詳細を確認したければ、次のコマンドで。\n\n```{r}\n#| echo: false\n?mtcars\n```\n\n他にどんなデータが利用可能か確認したければ、以下を実行する。\n\n```{r}\n#| eval: false\ndata()\n```\n\n## ggplot2の基礎 {#sec-ggplotbasic}\n\n### ggplot2 とは何か {#sec-wiggplt}\n\n**ggplot2** は、Rで**綺麗な**図を作るためのパッケージである。 RStudio のChief Scientist である [Hadley Wickham](http://hadley.nz/) が大学院生時代に開発・公開し、アップデートを重ねてきたものである（Hadley は **tidyverse** などの重要パッケージ開発の中心人物であり、世界中のRユーザから最も尊敬されている人物だと考えられる。日本の一部のRユーザは彼を「羽鳥先生」と呼ぶ）。\n\nggplot2 の *gg* は　***G**rammar of **G**raphics*（図のための文法） という意味で、一貫した方法で様々な図が作れるように工夫されている。 最初は文法を覚えるのに少し苦労するかもしれない。しかし、一度文法を身につけてしまえば、様々な図を簡単に作れるようになるので、とても便利である。また、デフォルト（既定）の設定でそれなりに綺麗な図が作れるのも魅力である（某表計算ソフトのように、何も考えずに 3D棒グラフのような醜い図を作ってしまうということが防げる）。\n\nggplot2 についての詳しい説明は、Hadley自身が書いた *ggplot2: Elegant Graphics for Data Analysis, 3rd edition.* (Springer) で読むことができる（オンラインで[無料で公開](https://ggplot2-book.org/) されている）。\n\nまた、チートシート（[日本語版](https://raw.githubusercontent.com/rstudio/cheatsheets/main/translations/japanese/data-visualization_ja.pdf); [英語版](https://raw.githubusercontent.com/rstudio/cheatsheets/main/data-visualization.pdf)）が公開されているので、ダウンロードしていつでも見られるようにしておくと、便利である。\n\n::: callout-tip\nこの他にも、さまざまなチートシートが [RStudio のウェブサイト](https://www.rstudio.com/resources/cheatsheets/) で公開されている。 いくつかのチートシートには日本語翻訳もある。作成者と翻訳者の皆さんに感謝。\n:::\n\n### ggplot2 パッケージの読み込み {#sec-loadggplot2}\n\nこのページの冒頭に書いたとおり、**ggplot2**は **tidyverse** に含まれているので、`library()` で **tidyverse** を読み込めばよい。上で実行したなら、再度実行する必要はない。パッケージをインストール済みでない場合は、読み込みの前にまず`install.packages()` でインストールする。\n\n```{r}\n#| message: false\n#install.packages(\"tidyverse\", dependencies = TRUE)\nlibrary(tidyverse)\n```\n\n次に、日本語が正しく表示されるようにするため、`theme_set()` で使用する文字フォントを指定する。OSによって命令がやや異なるので注意されたい。 以下のチャンクは、どのOSでも動くように適切に場合分けを行う。その際、[**fontregisterer**](https://github.com/Gedevan-Aleksizde/fontregisterer) というパッケージを利用するので、これをあらかじめインストールしておく必要がある。このパッケージのインストール方法については [記述統計](descriptive-stat.html) の説明を、パッケージの詳細については [作者による説明](https://ill-identified.hatenablog.com/entry/2020/10/03/200618) を参照されたい）。 また、以下はあくまで例であり、他のフォントを使用してもよい（各自のパソコンにインストールされているフォントは私にはわからないので、変えたいなら自分で調べること。もちろん、日本語が表示できるフォントが必要）。また、RStudio Cloud を利用している場合は、日本語を表示することができない（一応表示する方法もあるが、ものすごく面倒なので割愛する）ので、諦めて英語を使おう（この授業では、レポートの本文が日本語で図のラベルが英語でも許容する。しかし、本来は日本語のレポートなら図のラベルもすべて日本語にすべきである。あるいは、英語で図を作るなら、本文も英語にすべきである）。\n\n```{r}\n#| message: false\n## 図のなかで日本語を使えるようにする\n## フォントの設定はお好みで\n## （Unix/Linux ではIPAexフォントのインストールが必要かも）\nlibrary(fontregisterer)\nif (.Platform$OS.type == \"windows\") { # Windows\n  my_font <- \"Yu Gothic\"\n} else if (capabilities(\"aqua\")) { # macOS\n  my_font <- \"Hiragino Sans\"\n} else { # Unix/Linux\n  my_font <- \"IPAexGothic\"\n}\ntheme_set(theme_gray(base_size = 9,\n                     base_family = my_font))\n```\n\n::: callout-tip\nコードチャンクに書かれたコマンドを1つずつ実行するときに使うショートカットは `command` + `reutrn` または `Ctrl` + `Enter` であることは以前説明した。複数行にわたるコマンドであっても、1つのコマンドであればこの方法で実行できる。しかし、上のコードチャンクのように複数のコマンドが含まれる場合、その方法では一挙に実行することができない。\n\nコードチャンク全体を一挙に実行するためには、`command` + `shift` + `return` または `Ctrl` + `Shift` + `Enter` というショートカットを利用する。\n:::\n\n### ggplot の基本的な使い方 {#sec-how2gg}\n\n`ggplot2::ggplot()` を使って図を作る手順は次のとおりである。\n\n1.  作図対象となるデータを `ggplot()` に入力する\n    -   `data`: データフレームを指定\n    -   `mapping`: どの変数を図のなかでどのように利用するか指定\n2.  `geom_xxx()` で図の層を加える（xxx の部分はグラフの種類によって変わる）\n3.  ラベル (label) や凡例 (legend) の指定、作図範囲の絞り込み、軸の交換などを行う\n4.  `plot()` で図を表示する\n\n順番にやってみよう。\n\n#### 例1：散布図\n\n上で読み込んだ **mtcars** は自動車に関するデータである。例として、燃費 (mile per gallon; mpg) と車の重量 (weight; wt) の関係を散布図にしてみよう。\n\nまず、 作図対象となるデータを指定する。また、作図の対象となる変数を指定する。ここでは、散布図の横軸 `x`に wt、縦軸`y`に mpg を指定する。\n\n```{r}\np1_1 <- ggplot(data = mtcars, \n               mapping = aes(x = wt, y = mpg)) \n```\n\n同じことだが、`data` と`mapping` は省略して\n\n```{r}\n#| eval: false\np1_1 <- ggplot(mtcars, aes(x = wt, y = mpg)) \n```\n\nと書くことが多い。\n\nこの時点で図を表示してみる。\n\n```{r}\nplot(p1_1)\n```\n\n指定した通り、横軸に`wt`、縦軸に`mpg`をとった図を描く準備ができているが、グラフ自体はまだない。\n\nここに、散布図を作るための層 (layer) を加える。図を作るためには、`geom_xxx()` のように、**geom** から始まる関数で新たな層 (layer) を加える必要がある。geom とは <u>geom</u>etry（形状）のことである。たとえば、ヒストグラム (histogram) を作るときは`geom_histogram()` を、箱ひげ図 (box\\[-and-whisker\\] plot) を作るときは `geom_boxplot()` を使う。\n\n散布図は、`geom_point()` でできる。\n\n```{r}\np1_2 <- p1_1 + geom_point()\n```\n\nこのように、前に作ったものに `+` で何かを加えることで、ggplot に新たな要素を追加することができる。この時点で、作った図を表示してみよう。\n\n```{r}\nplot(p1_2)\n```\n\n散布図ができた。\n\n次に、ラベルをわかりやすいものに変える。`labs()` で変更する。（**注意：** RStudio Cloud を使っている場合は日本語不可。日本語を正しく表示するために事前準備が必要。上の説明を参照。）\n\n```{r}\np1_3 <- p1_2 + \n    labs(x = \"重量 (1000 lbs)\", \n         y = \"燃費 (Miles / US gallon)\")\n```\n\n表示してみる。\n\n```{r}\nplot(p1_3)\n```\n\nこれで散布図ができた。\n\n慣れてきたら、一度にコマンドを書いてもよい。\n\n```{r}\np1 <- ggplot(mtcars, aes(x = wt, y = mpg)) +\n    geom_point() +\n    labs(x = \"重量 (1000 lbs)\", \n         y = \"燃費 (Miles / US gallon)\")\nplot(p1)\n```\n\n#### 例2：ヒストグラム\n\n引き続き **mtcars** を使う。燃費 (mile per gallon; mpg) のヒストグラムを作ってみよう。\n\nまず、作図対象となるデータを入力する。また、作図対象となる変数を指定する。ヒストグラムは**1つの変数**を可視化するグラフなので、**aes** には`x`のみ指定する。\n\n```{r}\np2_1 <- ggplot(mtcars, aes(x = mpg)) \n```\n\nこの時点で図を表示してみる。\n\n```{r}\nplot(p2_1)\n```\n\n指定した通り、横軸にmpgをとった図を描く準備ができているが、グラフ自体はまだない。また、縦軸は指定していないので何もない。\n\nここに、ヒストグラムを作るための層 (layer) を加える。ヒストグラムは、`geom_histogram()` でできる。\n\n```{r}\np2_2 <- p2_1 + geom_histogram()\n```\n\nこの時点で表示してみよう。\n\n```{r}\nplot(p2_2)\n```\n\nヒストグラム自体はできている。しかし、ビン（ヒストグラムの一つひとつの棒）の幅が狭すぎるので、`binwidth` で調整する（`binwidth` を指定しないと、`stat_bin()` using ... というメッセージが表示され、適切な `binwidth` を設定するよう促される）。ここでは、2.5 mpgごとに1つのビン（ヒストグラムの棒）を作ってみよう。\n\n```{r}\np2_3 <- p2_1 + \n    geom_histogram(binwidth = 2.5)\nplot(p2_3)\n```\n\nビンの境が見えにくいので、ビンの縁に黒色をつけよう。ビンの縁取りは `color` で指定する。`color` で指定するのはビンの中身の色ではないので注意しよう。\n\n```{r}\np2_4 <- p2_1 + \n    geom_histogram(binwidth = 2.5, color = \"black\")\nplot(p2_4)\n```\n\nビンの区切りがちょうどいい位置にないので、`boundary` でビンの境界をどの位置に置きくか指定する。今回はビンの幅が2.5 なので、境界線が$5, 7.5, 10, \\dots$ になるように 5 を指定する。\n\n```{r}\np2_5 <- p2_1 + \n  geom_histogram(binwidth = 2.5, \n                 color = \"black\",\n                 boundary = 5)\nplot(p2_5)\n```\n\n次に、ラベルをわかりやすいものに変える。（**注意：** RStudio Cloud を使っている場合は日本語不可。）\n\n```{r}\np2_6 <- p2_5 + \n    labs(x = \"燃費 (Miles / US gallon)\", y = \"度数\")\nplot(p2_6)\n```\n\nこれで縦軸が度数 (count, frequency) のヒストグラムができた。\n\nヒストグラムの縦軸を確率密度 (probability density) に変えたいときは、`aes()` で `y = after_stat(density)` を指定する。ついでに、ビンの色をドジャーブルーに変えてみる（必要ではない。Go, Dodgers!)\n\n```{r}\np2_dens <- ggplot(mtcars,\n                  aes(x = mpg, \n                      y = after_stat(density))) +\n    geom_histogram(binwidth = 2.5, \n                   boundary = 5, \n                   color = \"black\", \n                   fill = \"dodgerblue\") +\n    labs(x = \"燃費 (Miles / US gallon)\", \n         y = \"確率密度\")\nplot(p2_dens)    \n```\n\n指定可能な色は、[このページ](http://www.okadajp.org/RWiki/?%E8%89%B2%E8%A6%8B%E6%9C%AC) で確認できる。\n\n#### 例3：箱ひげ図\n\nRに用意されている、ダイヤモンドのデータ **diamonds** を使ってみよう。\n\n```{r}\ndata(diamonds)\nglimpse(diamonds)\nclass(diamonds)\n```\n\n詳細については、`?diamonds` で確認できる。\n\nダイヤモンドのカットの質 (cut) ごとの 深さ (depth) のばらつきを可視化するため、箱ひげ図 (box\\[-and-whisker\\] plot) を作ってみよう。\n\nまず、データとマッピングを指定する。\n\n```{r}\np3_1 <- ggplot(diamonds, aes(x = cut, y = depth))\nplot(p3_1)\n```\n\n指定通り、横軸に cut、縦軸に depth を可視化する準備ができている。\n\n次に、`geom_boxplot()` で箱ひげ図の層を加える。\n\n```{r}\np3_2 <- p3_1 + geom_boxplot() \nplot(p3_2)\n```\n\n軸ラベルを日本語にする (RStudio Cloud 以外)。\n\n```{r}\np3_3 <- p3_2 + labs(x = \"カット\", y = \"深さ\")\nplot(p3_3)\n```\n\nFair, Good なども日本語にすることもできるが、今回は覚えなくて良い（私にはダイヤモンドの知識がまったくないのでよくわからないが、ネットで検索した限りだと、Fair の訳は フェア、Good の訳は グッド、 ... で日本語にする意味がなさそう）。一応できるということを見せるために、コードは載せておく（このコードは今は理解しなくてよい）。\n\n```{r}\np3_3a <- diamonds %>% \n    mutate(cut_jp = factor(\n      cut, \n      levels = c(\"Fair\", \"Good\", \"Very Good\", \"Premium\", \"Ideal\"),\n      labels = c(\"フェア\", \"グッド\", \"ベリーグッド\", \n                 \"プレミアム\", \"アイディアル\"))) %>% \n    ggplot(aes(x = cut_jp, y = depth)) +\n    geom_boxplot() +\n    labs(x = \"カット\", y = \"深さ\")\nplot(p3_3a)\n```\n\n箱ひげ図の向きを横向きにしたいときは、作った図に `coord_flip()` を使えば良い。\n\n```{r}\np3_4 <- p3_3 + coord_flip()\nplot(p3_4)\n```\n\nこのように、`coord_flip()` は横軸と縦軸を入れ替えてくれる。箱ひげ図以外でも使える。\n\nまた、`aes()` の `x`と`y` を入れ替えることで、向きを変えることもできる。\n\n```{r}\np4 <- ggplot(diamonds, aes(x = depth, y = cut)) +\n    geom_boxplot() +\n    labs(x = \"カット\", y = \"深さ\")\nplot(p4)\n```\n\nこれらの例からわかるとおり、作図に用いる変数の指定は、`aes()` で行う。**aes** とは <u>aes</u>thetics（美感）のことである。この `aes()` の指定の仕方は作る図によって異なる。したがって、ggplot2 の使い方をマスターするには、geom ごとに異なるaes の使い方を覚える必要がある。覚えるといっても、必ずしも暗記する必要なない。頻繁に使うものは覚えたほうが楽（自然に覚える）が、その他のものについては上で紹介したチートシートやインターネット上にまとめられた情報（たとえば、[ココ](https://qiita.com/yutannihilation/items/e1b9249541fc57b60705) や[ココ](https://ggplot2.tidyverse.org/reference/)）で確認すればよい。\n\n## 作成した図の保存 {#sec-savefig}\n\n作成した図は、PDFファイルやPNGファイルなどの外部ファイルに保存することができる。プロジェクト内に、図を保存するための **figs** というディレクトリ（フォルダ）を新たに作り、図をその中に保存しよう。\n\n```{r}\n#| eval: false\ndir.create(\"figs\")\n```\n\n図はPDFとして保存することが望ましい（理由の説明は省略するが、一言で述べれば「ベクター画像」が望ましいから）ので、PDFファイルでの保存方法のみ説明する。\n\n::: callout-important\n図のファイルを作るときは、あらかじめ図のサイズ（幅 \\[width\\] と高さ \\[height\\]）を決めておくことが重要である。いいかげんなサイズで図を作り、後で拡大・縮小すると、軸ラベルの文字などが伸びたり縮んだりして汚くなるので、スマートではない。\n:::\n\n基本的には、以下の3つのステップで図を保存する。\n\n1.  図を保存するためのファイルを開く（作る）\n2.  図をファイルに書き込む\n3.  ファイルを閉じる\n\nこれら3つのステップは**セットで**行う。R Markdown を使っている場合は特に注意が必要で、**各ステップを1つずつ実行しても図が保存されない**。 そこで、3つのステップを1つのコードチャンクの中にまとめて書き、以下のいずれかの方法で**チャンク全体を一挙に実行する必要がある**。\n\n-   ショートカットを使う\n    -   `command` + `shift` + `return` (macOS)\n    -   `Ctrl` + `Shift` + `Enter` （どのOSでも）\n-   チャンク右上の実行ボタン (Run Current Chunk) をクリックする\n\nPDF形式の図を保存するには、`cairo_pdf()` という関数を使うのが便利である。 先ほど作ったヒストグラム `p2_6` を、PDFファイルに保存しよう。 ファイル名は、`hist_eg1.pdf` にしよう。図の大きさは、A4用紙の半ページよりやや小さくなるように、幅 (width) を5インチ (127.0mm)、高さ (height) を4インチ (101.6mm) にする。軸ラベルに日本語を使っているので、日本語を表示できるフォントを指定する必要があるが、上で `library(tidyverse)` を実行した直後に **fontregregisterer** パッケージを利用して `theme_set()` で指定したフォント（Linux は IPAexゴシック、macOS は ヒラギノ角ゴシック、Windows は游ゴシック）が使われる。 第1ステップの内容をまとめると、次のようになる（**第1ステップだけで実行しない!!!**）。\n\n```{r}\n#| eval: false\ncairo_pdf(file = \"figs/hist_eg1.pdf\",\n          width = 5, height = 4)\n```\n\n**file** の `figs/` という部分が、figs ディレクトリ（フォルダ）の中にファイルを作ることを指示している。\n\n第2ステップは、第1ステップの直後に `print(p2_6)` とすればよい。\n\n最後に、ファイルを閉じるために、`dev.off()` を実行する。\n\n以上をまとめると、次のようになる。R Markdown では、以下の**コードチャンクを一挙に実行する必要がある**（Rスクリプトでは1行ずつ実行してよい）。\n\n```{r}\n#| eval: false\ncairo_pdf(file = \"figs/hist_eg1.pdf\",\n          width = 5, height = 4)\nprint(p2_6)\ndev.off()\n```\n\nこれで図 (`p2_6`) が保存されるはずだ。figsディレクトリの中に、`hist_eg1.pdf` というPDFファイルができていることを確かめよう。また、PDFファイルを開いて図が保存されていることも確認しよう。\n\n:::callout-note\nmacOS を使っているなら、`cairo_pdf()` の代わりに `quartz()` を使うこともできる。`quartz()` を使う場合は、\n\n```{r}\n#| eval: false\nquartz(file = \"figs/hist_eg1.pdf\", \n       type = \"pdf\", family = \"HiraginoSans-W3\",\n       width = 5, height = 4)\nprint(p2_6)\ndev.off()\n```\nのようにする。\n:::\n\n## よく使う図の作り方 {#sec-commonfig}\n\nggplotの使い方を身につけるために、統計学でよく使う基本的な図を作ってみよう。\n\n例として、[fake_score.csv](http://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_score.csv) という架空のデータを使おう。このデータに含まれる変数は、以下の通りである。\n\n-   id: 個人識別番号。\n-   class: クラス。1組から8組まで。\n-   gender: 性別。女 (female) か男 (male) か。\n-   math: 数学の試験の得点。\n-   english: 英語の試験の得点。\n-   chemistry: 化学の試験の得点。\n\nまず、データを保存するためのディレクトリを作る。既にプロジェクト内に data ディレクトリがある場合（これまでの実習をすべて実行していれば、既にあるはずである）、このコマンドは実行しなくてよい。\n\n```{r}\n#| eval: false\ndir.create(\"data\")\n```\n\n次に、データをダウンロードする。以下のコードはWindows では失敗する可能性が高いので、[ココを右クリック](https://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_score.csv) して対象をファイルに保存する。保存先はプロジェクトフォルダの中の data フォルダにする（ダウンロードした後にファイルを移動してもよい）。\n\n```{r}\n#| eval: false\ndownload.file(\n  url = \"https://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_score.csv\",\n  destfile = \"data/fake_score.csv\"\n)\n```\n\nデータを読み込む。\n\n```{r}\n#| message: false\nmyd <- read_csv(\"data/fake_score.csv\")\n```\n\nデータの中身を確認する。\n\n```{r}\nglimpse(myd)\n```\n\n正しくデータが読み込めたようだ。このデータを使い、作図の方法を学習しよう。\n\nこの時点でデータが正しく読み込めていない場合は、ウェブブラウザで [fake_score.csv](https://yukiyanai.github.io/jp/classes/stat2/contents/data/fake_score.csv) をダウンロードし、ダウンロードしたファイルを手動でプロジェクト内のデータフォルダの中に移動してから、以下を実行し直そう。 もう一度データを読み込む。\n\n```{r}\n#| eval: false\nmyd <- read_csv(\"data/fake_score.csv\")\nglimpse(myd)\n```\n\n### 棒グラフ {#sec-barchart}\n\n棒グラフ (bar plot) は `geom_bar()` で作る。まず、クラスごとの人数を棒グラフにしてみよう。 横軸にクラス、縦軸にはクラスの人数を表示する。そのために、次のコマンドを使う。\n\n```{r}\nbar1 <- ggplot(myd, aes(x = class)) +\n    geom_bar() +\n    labs(x = \"クラス\", y = \"人数\")\n```\n\n表示してみよう。\n\n```{r}\nplot(bar1)\n```\n\n各クラスの人数が、等しく50人ずつであることがわかる。\n\n横軸のクラスの数字1から8のうち、表示されていない数字がある。`scale_x_continuous()` を使って、すべて表示させよう。**既に作った bar1 を基に**、新しい図を作る。\n\n```{r}\nbar2 <- bar1 + \n    scale_x_continuous(breaks = 1:8)\n```\n\n表示してみよう。\n\n```{r}\nplot(bar2)\n```\n\nクラスの数字をすべて表示することができた。\n\n男女の内訳はどうなっているだろうか。男女を色分けして描き、図で確かめよう。 データセットに含まれる gender という変数を使って色分けするために、`aes` の**中**で `fill` を指定する。\n\n```{r}\nbar3 <- ggplot(myd, aes(x = class, fill = gender)) +\n    geom_bar() +\n    labs(x = \"クラス\", y = \"人数\") +\n    scale_x_continuous(breaks = 1:8)\nplot(bar3)\n```\n\n女子の方が多いクラスと男子の方が多いクラスがあるようだ。 凡例 (legend) が英語になっているので、日本語に直そう。\n\n```{r}\nbar4 <- bar3 + \n    scale_fill_brewer(palette = \"Accent\",\n                      name = \"性別\", \n                      labels = c(\"女\", \"男\"))\nplot(bar4)\n```\n\nこの棒グラフでは男女の数の比較が難しいので、男女の棒を並べて描きたい。そのために、`position = \"dodge\"` を指定する。\n\n```{r}\nbar5 <-  ggplot(myd, aes(x = class, fill = gender)) +\n    geom_bar(position = \"dodge\") +\n    labs(x = \"クラス\", y = \"人数\") + \n    scale_x_continuous(breaks = 1:8) +\n    scale_fill_brewer(palette = \"Set2\",\n                      name = \"性別\", \n                      labels = c(\"女\", \"男\"))\nplot(bar5)\n```\n\nこれで、クラス1からクラス4までは女子が20人で男子が30人だが、残りのクラスでは男女の数が逆転していることがわかる。\n\n### ヒストグラム {#sec-histogram}\n\nヒストグラム (histogram) は、ある変数の分布の仕方を確かめる際に最も便利な図である。 既に説明した通り、ヒストグラムを作るには `geom_histogram()` を使う。\n\n#### 基本的な使い方\n\nまず、数学の点数をヒストグラムにしてみよう。\n\n```{r}\nhist1 <- ggplot(myd, aes(x = math)) +\n    geom_histogram() +\n    labs(x = \"数学の点数\", y = \"人数\")\nplot(hist1)\n```\n\nこのままだと、ヒストグラムの一つひとつの棒 (bin) の区切りが分かりにくいので、棒の縁に色をつけよう。 既に説明したとおり、縁取りの色は`color` で指定する。このとき、変数によって色を変えるのではなく、自分で設定した色を使うため、`aes`の**外**で `color` を指定する（上での棒グラフの例では、`aes`の中で `fill` を指定した）。\n\n```{r}\nhist2 <- ggplot(myd, aes(x = math)) +\n    geom_histogram(color = \"black\") +\n    labs(x = \"数学の点数\", y = \"人数\")\nplot(hist2)\n```\n\n次に棒の幅 (bin width) を変えてみよう。**binwidth** を指定することで、棒の幅を設定できる。試しに、10点ごとにしてみよう。\n\n```{r}\nhist3 <- ggplot(myd, aes(x = math)) +\n    geom_histogram(color = \"black\", binwidth = 10) +\n    labs(x = \"数学の点数\", y = \"人数\")\nplot(hist3)\n```\n\n#### 縦軸を確率密度に変える\n\n上で説明したとおり、`y` に `after_stat(density)` を指定することで、縦軸を確率密度 (probability density) に変えることができる。\n\n```{r}\nhist4 <- ggplot(myd, aes(x = math, y = after_stat(density))) +\n    geom_histogram(color = \"black\", binwidth = 10) +\n    labs(x = \"数学の点数\", y = \"確率密度\")\nplot(hist4)\n```\n\n縦軸が確率密度のヒストグラムができた。\n\n#### 複数の geom を重ねる\n\n数学の点数の平均値は、\n\n```{r}\nmean(myd$math)\n```\n\nである。これを図に書き加えよう。\n\nまず、`geom_vline()` で、平均値の位置に縦線を加える。 <u>v</u>lineの**v** はvertical（垂直）を示す。 `geom_vline()`で縦線の位置を決めるために、**xintercept**（x切片、つまり、線が横軸と交わる位置）を指定する。\n\n```{r}\nhist5 <- hist3 + \n    geom_vline(xintercept = mean(myd$math), \n               color = \"red\")\nplot(hist5)\n```\n\n次に、平均値の値を（小数第一位までに丸めて \\[round\\] して）書き込む。 日本語を使うので、`family` でフォントを指定する必要がある。\n\n```{r}\nhist6 <- hist5 + \n    geom_text(aes(x = 70, y = 90, \n                  label = str_c(\"平均値：\", round(mean(myd$math), 1))),\n              color = \"red\", \n              family = my_font)\n```\n\n表示する。\n\n```{r}\nplot(hist6)\n```\n\n#### facet でグループを分ける\n\n数学の点数のヒストグラムを、クラスごとに分けて描いてみよう。そのために、`facet_wrap()` を使う。\n\n```{r}\nhist7 <- hist3 + \n    facet_wrap(vars(class))\nplot(hist7)\n```\n\nこのように、クラスごとにヒストグラムができる。\n\n### 箱ひげ図 {#sec-boxplot}\n\nヒストグラムは分布の形状を確かめるのに便利だが、上で作った `hist7` のように、複数のグループの分布を比較するのには少し不便である。 そこで異なるグループの分布を比較するときによく使われるのが、箱ひげ図 (box\\[-and-whisker\\] plot) である。箱ひげ図は、五数要約（最小値、第1四分位数、中央値、第3四分位数、最大値）と外れ値（「1.5 $\\times$ IQRルール」で判定される）を図で表現するものである。\n\n箱ひげ図は、`geom_boxplot()` で作る。このとき、aes には `x`（比較するグループを表す変数）と`y`（作図の対象となる変数）を指定する（`x`の代わりに `group` を使うこともできる）。ここで、class の中身の数字には数値としての意味はなく、単にクラス分けのための記号にすぎないことを gpplotに伝えるために `as.factor()` を使う（本当はデータ前処理の時点で　id と class は factor にしておくことが望ましいが、今回はこれで妥協する）。既に説明したとおり、横向きにしたいときは、`x` と`y` を入れ替えれば良い。\n\n```{r}\nbox1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_boxplot() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(box1)\n```\n\nこれで、グループ間で数学の点数の五数を比較しやすくなった。\n\n### バイオリンプロット {#sec-violinplot}\n\n箱ひげ図でグループ間比較がしやすくなったが、ヒストグラムとは異なり、分布の形状がわからなくなってしまった。この不満を解消してくれるのが、バイオリンプロット (violin plot) である。`geom_violin()` で作る。\n\n```{r}\nvln1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(vln1)\n```\n\nこの図は、ヒストグラムを横倒しにしてその概形を滑らかな線で表したものと、それを鏡に写したものが合わさってできている。バイオリンプロットの幅が広い（狭い）ところが、ヒストグラムの山が高い（低い）ところである。\n\n### 箱ひげ図とバイオリンプロットの重ね描き {#sec-overlay}\n\nバイオリンプロットは、分布の形状がわからないという箱ひげ図の弱点を克服しているものの、箱ひげ図では一目でわかった中央値や四分位範囲がわからないという弱点がある。両者の長所を活かすため、二つの図を重ねて描いてみよう。\n\n```{r}\nbv1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_boxplot() +\n    geom_violin() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv1)\n```\n\nバイロリンプロットが箱ひげ図の線に重なり、箱ひげ図がよく見えない。箱ひげ図をバイオリンプロットの上に（手前に）描いたほうがよさそうだ。ggplotでは、**後に加えた要素（層）が上になる**ので、`geom_violin()` の後に `geom_boxplot()` を書く。\n\n```{r}\nbv2 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    geom_boxplot() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv2)\n```\n\n今度は、箱がバイオリンの線に重なってしまっている。`geom_boxplot()` で **width** を指定し、箱の幅を狭くしてみよう。\n\n```{r}\nbv3 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    geom_boxplot(width = 0.3) +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv3)\n```\n\nこれで、箱ひげ図とバイロリンプロットが同時に確認できるようになった。しかし、このままでは箱ひげ図が目立たないので、色を変えよう。\n\n```{r}\nbv4 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_violin() +\n    geom_boxplot(width = 0.3, fill = \"gray\") +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bv4)\n```\n\nこの図を見れば、数学の点数の分布をクラス間で比較できる。\n\n### ビースウォームプロット（蜂群図） {#sec-beeswarm}\n\n箱ひげ図とバイオリンプロットで、グループ間の分布を比較できるようになった。しかし、観測値が実際にどの値をとったかはわからない。この問題を克服するために使われるのが、ビースウォームプロット (bee swarm plot) である。\n\nggplotを使ってビースウォームプロットを描くには、**ggbeeswarm** というパッケージを導入するのが簡単だ。 まず、インストールする（既にインストール済みなら、このコマンドは実行しなくてよい）。\n\n```{r}\n#| eval: false\ninstall.packages(\"ggbeeswarm\")\n```\n\nインストールが済んだら、パッケージを読み込む。\n\n```{r}\nlibrary(ggbeeswarm)\n```\n\nビースウォームプロットは、`geom_beeswarm()`または`geom_quasirandom()` で描く。 これら二つの違いは、点の散らし方である。実際に作って比べてみよう。\n\n```{r}\nbee1 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_beeswarm() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bee1)\n```\n\n```{r}\nbee2 <- ggplot(myd, aes(x = as.factor(class), y = math)) +\n    geom_quasirandom() +\n    labs(x = \"クラス\", y = \"数学の点数\") \nplot(bee2)\n```\n\nビースウォームプロットでは、全く同じか近い値をとった観測値が重ならないよう、点を散らして (jittering) くれる。その散らし方が、二つの geom で異なる。\n\nこれらの図により、分布の中で実際に観測値がどこにあるかが明らかになった。ビースウォームプロットを、箱ひげ図とバイロリンプロットに重ねてみよう。\n\n```{r}\nbee3 <- bv4 + geom_quasirandom()\nplot(bee3)\n```\n\n点のせいで箱ひげ図がの線が見えにくいなら、(1) 点の色を変えるか、(2) 点の透明度を上げてみよう。透明度は `alpha` で指定する。`alpha = 1/3` とすると、点が3つ重なったときに透明度が0（つまり、普通の色）になるなるようになる。\n\n両方同時にやってみよう。\n\n```{r}\nbee4 <- bv4 + \n    geom_quasirandom(color = \"skyblue\", alpha = 3/5)\nplot(bee4)\n```\n\n男女の点の色を変えてみよう。\n\n```{r, fig.width = 6}\nbee5 <- bv4 + \n    geom_quasirandom(aes(color = gender),\n                     alpha = 2/3) +\n    scale_color_brewer(palette = \"Dark2\",\n                       name = \"性別\", \n                       labels = c(\"女\", \"男\"))\nplot(bee5)\n```\n\nこれで、分布の形状と五数だけでなく、実際の観測値がどこにあるかまで明らかにできた。\n\n### 散布図 {#sec-scatterplot}\n\nここまでは、1つの変数を可視化するグラフを作ってきた。続いて、2変数の関係を可視化してみよう。\n\n2変数（2つの量的変数）の関係を可視化するための最も基本的な図は散布図 (scatter plot) である。散布図は、`geom_point()` で作る。散布図の`aes`には、横軸の変数 `x` と縦軸の変数 `y` を指定する。\n\n数学の点数（横軸）と英語の点数（縦軸）の関係を散布図にしみてよう。\n\n```{r}\nscat1 <- ggplot(myd, aes(x = math, y = english)) +\n    geom_point() +\n    labs(x = \"数学の得点\", y = \"英語の得点\")\nplot(scat1)\n```\n\n英語も数学も100点満点の試験なのに、図が横長になっていて数学の得点の範囲の方が広く見えてしまう。 この点を改善するために、`xlim()` と `ylim()` で横軸と縦軸の範囲を指定し、`coord_fixed(ratio = 1)` で縦横比を1:1にしよう（ratio = 1 はデフォルトなので、単に `coord_fixed()` でもいいが、比がはっきりわかるようにここでは明示しておく）。\n\n```{r}\nscat2 <- scat1 + \n    xlim(0, 100) + \n    ylim(0, 100) +\n    coord_fixed(ratio = 1)\nplot(scat2)\n```\n\n男女の点を、色 (color) と形 (shape) で区別してみよう。\n\nまず、色で区別する。\n\n```{r}\nscat3 <- ggplot(myd, \n                aes(x = math,\n                    y = english, \n                    color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_discrete(name = \"性別\", \n                         labels = c(\"女\", \"男\")) +\n    xlim(0, 100) +\n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat3)\n```\n\nこれで一応色分けはできたが、色があまり気に入らない。 特に、赤と緑を区別できない人がいると思われるので、`scale_color_brewer()` で色使い (color paletter) を **Accent** に変えてみよう。指定できるパレットについては、[このページ](http://www.sthda.com/english/wiki/colors-in-r) を参照されたい。\n\n```{r}\nscat3a <- ggplot(myd, \n                 aes(x = math, \n                     y = english, \n                     color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Accent\",\n                       name = \"性別\", \n                       labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat3a)\n```\n\n色分けができた。試しにもう1つ異なるパレットを作ってみよう。`Set1` を使ってみる。\n\n```{r}\nscat3b <- ggplot(myd, \n                 aes(x = math, \n                     y = english, \n                     color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Set1\", \n                       name = \"性別\", \n                       labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat3b)\n```\n\n「男は青で女は赤」というステレオタイプ（偶然そうなってしまっただけだが）が気にいらないなら、色を逆にしてみよう。パレットに用意された色を使う順番を、`direction = -1` で逆順にできる。\n\n```{r}\nscat3c <- ggplot(myd, \n                 aes(x = math, \n                     y = english, \n                     color = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Set1\", \n                       direction = -1,\n                       name = \"性別\",\n                       labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) +\n    coord_fixed(ratio = 1)\nplot(scat3c)\n```\n\n次に、形 (shape) で区別する。\n\n```{r}\nscat4 <- ggplot(myd, \n                aes(x = math, \n                    y = english, \n                    shape = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\", \n         y = \"英語の得点\") +\n    scale_shape_discrete(name = \"性別\", \n                         labels = c(\"女\", \"男\")) +\n    xlim(0, 100) +\n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat4)\n```\n\n最後に、色と形で区別する。\n\n```{r}\nscat5 <- ggplot(myd, \n                aes(x = math,\n                    y = english,\n                    color = gender,\n                    shape = gender)) +\n    geom_point() +\n    labs(x = \"数学の得点\",\n         y = \"英語の得点\") +\n    scale_color_brewer(palette = \"Accent\", \n                       direction = -1,\n                       name = \"性別\", \n                       labels = c(\"女\", \"男\")) +\n    scale_shape_discrete(name = \"性別\", \n                         labels = c(\"女\", \"男\")) +\n    xlim(0, 100) + \n    ylim(0, 100) + \n    coord_fixed(ratio = 1)\nplot(scat5)\n```\n\nこのように、ggplot2を使えば**簡単**に**綺麗**な図を作ることができる。\n\n慣れるまではggplot2での作図を面倒に感じるかもしれないが、慣れてしまえばggplotが手放せなくなるだろう。\n"},"formats":{"html":{"execute":{"fig-width":5,"fig-height":4,"fig-format":"retina","fig-dpi":96,"error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"self-contained-math":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":true,"highlight-style":"arrow","html-math-method":"mathjax","output-file":"intro-to-ggplot2.html"},"language":{"toc-title-document":"このページの内容","toc-title-website":"On this page","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"注","callout-tip-caption":"ヒント","callout-note-caption":"備考","callout-warning-caption":"注意","callout-important-caption":"重要","callout-danger-caption":"危険！","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"コードを表示","code-tools-hide-all-code":"コードを隠す","code-tools-view-source":"Source を見る","code-tools-source-code":"Source Code","copy-button-tooltip":"コピーする","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","crossref-fig-title":"図","crossref-tbl-title":"表","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Newest","listing-page-order-by-date-desc":"Oldest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"crossref":{"ref-hyperlink":true},"theme":"yeti"},"extensions":{"book":{"multiFile":true}}}}}