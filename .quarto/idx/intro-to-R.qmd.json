{"title":"Rの基本操作","markdown":{"headingText":"Rの基本操作","containsRefs":false,"markdown":"\nここでは、Rの基本的な使い方を解説する。RとRStudioのインストールについては、以下の資料を参照されたい。\n\n-   [Linux (Ubuntu) 編](https://yukiyanai.github.io/jp/resources/docs/install-R_ubuntu.pdf) (PDF, 4.6MB)\n-   [macOS 編](https://yukiyanai.github.io/jp/resources/docs/install-R_macOS.pdf) (PDF, 4.9MB)\n-   [Windows 編](https://yukiyanai.github.io/jp/resources/docs/install-R_windows.pdf) (PDF, 5.8MB)\n\n## Rの基礎 {#sec-rbasic}\n\nRのコードはRのConsoleに直接入力してもいいし、スクリプトに保存してRから呼び出してもよい。スクリプトを使うときは、スクリプトファイルを**file_name.R** のように **.R** ファイルとして保存する。そして、RのConsole で `source(\"file_name.R\")` とすれば、スクリプト全体が実行される。\n\nRコマンドの区切りは改行である。改行すれば、1つのコマンドが終了したと認識される。\n\n```{r}\n35 + 87\n```\n\nただし、括弧が閉じていなかったり、行末に二項演算子 (`+` や `*` など) があるときは、コマンドが次の行まで続いていると認識される。\n\n```{r}\n35 +\n    87\n```\n\n1行に複数のコマンドを書きたいときは `;` で区切る。\n\n```{r}\n35 + 87; 25 * 4\n```\n\n通常は、1行には1つのコマンドのみ書くようにしよう。\n\nRは大文字と小文字を区別する。したがって、`Var1` と `var1` は異なるモノ（変数、オブジェクト）として認識される。 変数名は英数字と`_` \\[アンダースコア\\] のみで構成するべきである（日本語も使えるが、トラブルの元なので避けるべき）。ただし、頭文字に数字は使えない。\n\nスペースは1つ以上ならいくつあっても1つのスペースがある場合と同じである。また、演算子の前後のスペースはあってもなくてもよい（コードの読み易さを考えてスペースの有無を決めること）。\n\n::: callout-important\nコード中のスペースは**半角**スペースでなければならない。日本語入力で使うスペースは全角スペースだが、全角スペースがあるとコードが正しく動作しないので要注意。プログラミングの際には日本語入力が「オフ」になっていることを確認しよう。\n:::\n\n`#` はコメントの開始として扱われる。 行頭に`#` を書くと、その行すべてがコメントとして扱われる。\n\n```{r}\n# 2 * 4  # 行頭からすべてコメント \n```\n\n行の途中に`#` を書くと、`#` 以降がコメントとして扱われる。\n\n```{r}\n2 * 4  # これはコメント\n```\n\nコメントを書く作業は、コマンドを書く作業と同様に大切である。詳しくは授業で説明する。\n\nRに用意されている関数の使い方についてヘルプを参照したいときは`?関数名` （または`help(関数名)`)　とする。たとえば、平均値を求める関数 `mean()` のヘルプは、\n\n```{r}\n#| eval: false\n?mean\n```\n\nで確認できる。ウェブブラウザでヘルプを参照したいときは、`help.start()` とする。\n\nインストール済みのパッケージを利用するときは、`library(パッケージ名)` とする。たとえば、**ggplot2** パッケージを使いたいなら、\n\n```{r}\n#| eval: false\nlibrary(ggplot2)\n```\n\nとする。パッケージをインストールする際は、`install.packages(\"パッケージ名\")` とする。その際、どのレポジトリからダウンロードするか尋ねられるので、自分に一番近いところ選ぶ。（パッケージをインストールする度にレポジトリを指定するのが面倒なら、`.Rprofile` であらかじめレポジトリを指定しておく。）\n\n### Rを電卓代わりに使う {#sec-calculator}\n\nRは電卓の代わりとして使うことができる。 たとえば、\n\n```{r}\n1 + 1       # 足し算\n100 - 20    # 引き算\n5 * 8       # 掛け算\n2 / 3       # 割り算\n2 ^ 3       # 累乗\nsqrt(2)     # 平方根\n2 ^ (1 / 2) # sqrt(2) と同じ\n```\n\nなどの計算ができる。 計算の順番を指定するときは、() で囲めばよい。\n\n```{r}\n(5 * (2 + 1)) ^ 3  # (2 + 1) を最初に計算し、それに5を掛けてから最後に三乗する\n```\n\n### 変数の利用 {#sec-vars}\n\nRでは、変数（正確にはオブジェクト）を（ある程度）自由に作ることができる。 変数の名前は自由に決めてよい（ただし、数字から始まるものはだめ。また、`-` \\[ハイフン\\] はマイナスと区別できないので使えない）。 たとえば、\n\n```{r}\na <- 1\nb <- 2\n```\n\nとすると、`a`, `b` という2つの変数ができる。ここで `<-` は変数に値を割り当てることを意味する。 （`<-` の代わりに`=` を使うこともできるが混乱の元になるので、変数を定義するときは常に`<-` を使うことにする。）\n\n**`<-` はショートカットキーを使って入力する。**\n\n-   macOS: `option` + `-`（`option` キーと `-`\\[マイナス\\] キーを同時に押す）\n-   Windows: `Alt` + `-`（`Alt` キーと `-` \\[マイナス\\] キーを同時に押す）\n\nこうすることで、 `<-` だけでなく、その**前後に半角スペースが1つずつ挿入されるので便利**である。つまり、順番に\n\n1.  a\n2.  `option` + `-` または `Alt` + `-`\n3.  1\n\nと打つと\n\n```{r}\n#| eval: false\na <- 1\n```\n\nと入力される。ショートカットキーを使わないと、\n\n1.  a\n2.  SPACE\n3.  \\<\n4.  \\-\n5.  SPACE\n6.  1\n\nと6段階の入力が必要になる。ショートカットキーを使うことで、これを3回に短縮できる。\n\n定義された変数名のみを入力して実行すると、変数の中身が表示される。\n\n```{r}\na\nb\n```\n\nこの変数は、計算に使える。\n\n```{r}\na + b\na - b\na * b\na / b\nb ^ a\n```\n\nまた、\n\n```{r}\nd <- a\na <- 3\n```\n\nとすると、$d = 1$, $a = 3$ となる（各自確かめること）。\n\nまた、変数名には日本語も使える。 たとえば、\n\n```{r}\n変数1 <- 5\n変数2 <- 7\n変数1 * 変数2\n```\n\nとすることも可能である。しかし、変数名に日本語を使うと、（1）英語/日本語の切り替えが面倒であり、（2）文字化け等の予期せぬ問題が生じることがあるので、なるべく日本語の変数名は使わないほうが無難である。\n\n変数の割当と画面への出力を同時に行いたいときは、全体を `()` で囲む。\n\n```{r}\n(d <- 3 * 5)\n```\n\n変数を消去したいときは`rm()` 関数を使う。\n\n```{r}\nrm(d)\n```\n\n### ベクトルと行列 {#sec-vector}\n\n#### ベクトル (vectors)\n\nRで特定のベクトル (vector) を作りたいときは、`c()` を（combine; 結合する）使う （上での変数を作るときに`c` という名前をスキップしたのは、この `c`という名前の関数があるためだった）。 たとえば、1, 2, 3, 4, 5 という5つの数字からなるベクトル **a** を作るには、\n\n```{r}\na <- c(1, 2, 3, 4, 5)\n```\n\nとする。このベクトルを画面に表示すると、\n\n```{r}\na\n```\n\nとなる。\n\nベクトルの中身は文字列でもかまわない。 たとえば、\n\n```{r}\nuniv_kochi <- c(\"KUT\", \"University of Kochi\", \"Kochi University\")\n```\n\nとすれば、文字列 (characters) のベクトルができる。 このように、文字列は引用符（`''` でも`\"\"` でもよい）で囲む。\n\nひとつひとつの要素を指定する代わりに、様々な方法でベクトルを作ることが可能である。 たとえば、`seq()` 関数（sequence; 数列）を使うと、一連の数字からなるベクトルを作ることができる。\n\n```{r}\nseq(1, 20, by = 1)   # 1から20までの整数。1:20 でも同じ\nseq(1, 20, by = 2)   # 1から19までの奇数\nseq(2, 20, by = 2)   # 2から20までの偶数\nseq(20, 1, by = -5)  # 降順、間隔は5\nseq(1, 100, length.out = 10) # 最小値が1、最大値が100で、要素の数 (length) が10のベクトル\n```\n\n`seq(x, y, by = 1)` の場合はより単純に `x : y`とすればよい。\n\n```{r}\n1 : 20\n```\n\nまた、`rep()`関数（replicate; 複製する）も便利である。\n\n```{r}\nrep(3, 10)   # 3が10個のベクトル\nrep(c('a', 'b', 'c'), c(3, 1, 2))  # aが3つ, bが1つ, cが2つのベクトル\n```\n\nベクトルの$i$番目の要素にアクセスするには`ベクトル名[i]`とする。 同時に複数の要素を取り出すこともできる。 たとえば、\n\n```{r}\na <- seq(10, 100, length.out = 10)\nb <- 10:1\na[2]\nb[2]\na[3:5]\na[c(1,3,5)]\na[c(8, 2, 4)]\n```\n\n#### ベクトルの演算\n\nRでは、ベクトルを使った演算が可能である。 たとえば、次のような計算ができる。\n\n```{r}\nx <- 1 : 10\nx + 10    # ベクトルxの各要素に10を加える\nx - 5     # ベクトルxの各要素から5を引く\nx * 2     # ベクトルxの各要素に2をかける\nx / 3     # ベクトルxの各要素を3で割る\nx ^ 2     # ベクトルxの各要素を2乗する\nsqrt(x)   # ベクトルxの各要素の平方根（square root）を計算する\n```\n\nまた、複数のベクトルを使って、次のような計算ができる。\n\n```{r}\nx <- 1:10\ny <- -10:-1\n\n# xのi番目の要素とyのi番目の要素を足す（i = 1, 2, ..., 10）\nx + y\n\n# xのi番目の要素からyのi番目の要素を引く（i = 1, 2, ..., 10）\nx - y\n\n# xのi番目の要素とyのi番目の要素をかける（i = 1, 2, ..., 10）\nx * y\n\n# xのi番目の要素をyのi番目の要素で割る（i = 1, 2, ..., 10）\nx / y\n\n# xのi番目の要素を「yのi番目の要素」乗にする（i = 1, 2, ..., 10）\nx ^ y\n```\n\nベクトル同士の足し算（引き算）をしても、ベクトルの長さは変わらない。\n\n```{r}\nlength(x)\nlength(y)\nlength(x + y)\n```\n\n長さの異なるベクトルを使って演算を行うと、短いのほうのベクトルは要素をリサイクルして対応する。\n\n```{r}\nx <- 1 : 10\ny <- c(100, 200)\nx + y\n```\n\nただし、長いほうのベクトルの長さが短いほうのベクトルの長さの整数倍になっていないときは、警告 (warning) が出る。\n\n```{r}\n#| warning: true\nx <- 1 : 10\ny <- c(100, 200, 300)\nx + y\n```\n\n2つのベクトルの内積 (dot product) は`%*%` で、直積 (outer product) は`%o%` または`outer()` で求められる。\n\n``` {r{}\nx <- c(1, 3, 5)\ny <- c(10, 20, 30)\nx %*% y      # xとyの内積\nx %o% y      # xとyの直積\nouter(x, y)  # xとyの直積\n```\n\n<br>\n\n#### 行列 (matrices)\n\nRで行列を作るには、`matrix()`関数を使う。 たとえば、\n\n```{r}\n(A <- matrix(1:9, nrow = 3, byrow = TRUE))\n(B <- matrix(1:9, nrow = 3, byrow = FALSE))\n```\n\nのようにする。 ここで、行列Aと行列Bの違いに注目する。 要素全体をひとつの集合としてみると、AとBの行列は全く同じである。 これは、上のコードでは`1:9`という部分が同じだからである。 しかし、要素の並び方が異なる。 Aを作ったコードは`byrow = TRUE`となっている。 これは、行 (row) 単位でセルを埋めて行くということである。 それに対し、Bでは`byrow = FALSE` となっている。 これは行単位でセルを埋めない（したがって、列 \\[col\\] 単位で埋める）ということを意味する。 この違いが、AとBの違いを生み出している。 行列を作るときは行数 `nrow` と列数 `ncol` を指定するが、要素の合計数が決まっているときは、どちらか一方を指定すれば、もう一方は自動的に決められる。 上の例では、要素の数が9で、行の数に3を指定したので、列の数は自動的に 9 / 3 = 3 になっている。\n\n行列の各行と各列にはそれぞれ名前を付けることができる。\n\n```{r}\nrow.names(A) <- c('row1', 'row2', 'row3')  # 各行に名前をつける\ncolnames(A) <- c('col1', 'col2', 'col3')   # 各列に名前をつける\nA\n```\n\n`row.names()`には `.` があり、`colnames()`にはそれがないことに注意。\n\n行列の$i$行$j$列を取り出すには、`行列名[i, j]`とする。 例えば\n\n```{r}\nA[1, 3]          # 第1行、第3列の要素を取り出す\nA[2, c(1, 3)]    # 第2行で、第1列と第3列の要素を取り出す\nA[3, ]           # 第3行の要素をすべて取り出す\nA[, 2]           # 第2列の要素をすべて取り出す\n```\n\n#### 行列の演算\n\nRでは行列を使った計算ができる。\n\n基本的な演算の結果は次のとおりである。\n\n```{r}\nA <- matrix(1:9, ncol = 3)   　# 行列Aを定義する\nB <- matrix(-4:4, ncol = 3)    # 行列Bを定義する\nA + 3   # 行列の各要素に3を加える\n2 * A   # 行列の各要素を2倍する\nA + B   # Aのi行j列要素とBのi行j列要素を足す (i, j = 1, 2, 3)\nA * B   # 行列の要素同士の積\nA %*% B  # 行列の積\nB %*% A  # 行列の積\n\n## AB と BA は異なる\nA %*% B == B %*% A  # 要素ごとに等しいかどうか比較する\na <- 1:3  # ベクトルを定義する\nA %*% a   # (3行3列) x (3行1列) なので結果は3行1列\n```\n\n行列の転置 (transpose) には`t()`を使う。\n\n```{r}\nt(A)\n```\n\n逆行列は`solve()`で求める。\n\n```{r}\nC <- matrix(c(2, 3, 5, \n              7, 11, 13,\n              17, 19, 23),\n            nrow = 3)\nsolve(C)\n```\n\n特異行列 (a singular matrix) に`solve()` を使うとエラーになる。\n\n```{r}\n#| error: true\nS <- matrix(1:9, nrow = 3)\nsolve(S)\n```\n\nエラーメッセージを読めば何がまずいのかわかるので、**エラーが出たらエラーメッセージの中身をよく読む**こと。 この場合は、行列が特異行列 (singular) であることを教えてくれている。\n\n:::callout-tip\nRを使っている最中にエラーが出ても何も問題ない。プログラミングを身につけるためには試行錯誤が必要なので、エラーをおそれず、どんどんエラーを出していこう。\n\nエラーが出たら、「自分の意図したとおりに動かず、エラーが出たのはなぜか」を考えよう。エラーの原因を特定することで、プログラミング（R言語）に対する理解が深まるだろう。\n:::\n"},"formats":{"html":{"execute":{"fig-width":5,"fig-height":4,"fig-format":"retina","fig-dpi":96,"error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"self-contained-math":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","toc":true,"toc-depth":3,"number-sections":true,"highlight-style":"arrow","html-math-method":"mathjax","output-file":"intro-to-R.html"},"language":{"toc-title-document":"このページの内容","toc-title-website":"On this page","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"注","callout-tip-caption":"ヒント","callout-note-caption":"備考","callout-warning-caption":"注意","callout-important-caption":"重要","callout-danger-caption":"危険！","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"コードを表示","code-tools-hide-all-code":"コードを隠す","code-tools-view-source":"Source を見る","code-tools-source-code":"Source Code","copy-button-tooltip":"コピーする","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","crossref-fig-title":"図","crossref-tbl-title":"表","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Newest","listing-page-order-by-date-desc":"Oldest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"en","fig-responsive":true,"crossref":{"ref-hyperlink":true},"theme":"yeti"},"extensions":{"book":{"multiFile":true}}}}}