{"title":"乱数生成","markdown":{"headingText":"乱数生成","containsRefs":false,"markdown":"\n**今回の目標**\n\n-   乱数の作り方を覚えよう！\n\n## 準備\n\n必要なパッケージを読み込む。\n\n```{r}\n#| message: false\nlibrary(tidyverse)\n```\n\n次に、日本語が正しく表示されるようにする。\n\n```{r}\n## 図のなかで日本語を使えるようにする\n## フォントの設定はお好みで\n## （Unix/Linux ではIPAexフォントのインストールが必要かも）\nif (.Platform$OS.type == \"windows\") { # Window\n  if (require(fontregisterer)) {\n    my_font <- \"Yu Gothic\"\n  } else {\n    my_font <- \"Japan1\"\n  }\n} else if (capabilities(\"aqua\")) {  # macOS\n  my_font <- \"HiraginoSans-W3\"\n} else {  # Unix/Linux\n  my_font <- \"IPAexGothic\"\n}\n\ntheme_set(theme_gray(base_size = 9,\n                     base_family = my_font))\n```\n\n## 乱数の生成\n\nRを使って乱数 (random numbers) を生成しよう。\n\n### コイン投げ\n\n自分で決めた特定の対象から、ランダムにどれかを選びたいときは、`sample()` 関数を利用する。たとえば、この関数を使ってコイン投げを実行したいときは、\n\n```{r}\ncoin <- c(\"表\", \"裏\")  # コインを定義する\nsample(coin, size = 1)\n```\n\nとする。`size` で何回選ぶか（何回コインを投げるか）を指定している。\n\nこれを何度か実行してみよう。\n\n```{r}\nsample(coin, size = 1)\nsample(coin, size = 1)\nsample(coin, size = 1)\nsample(coin, size = 1)\nsample(coin, size = 1)\n```\n\n選ぶ回数を変えてみよう。\n\n```{r}\nsample(coin, size = 2)\n```\n\nもう一度やってみよう。\n\n```{r}\nsample(coin)\n```\n\nさらに、もう一度やってみよう。\n\n```{r}\nsample(coin, size = 2)\n```\n\nこれを何度やっても、1回目が表なら2回目は裏、1回目が裏なら2回目が表になる。つまり、2回目のコイン投げはランダムではない。これは、`sample()` が決められた対象から1つずつ順番に選ぶという作業をしているためである。私たちが定義した `coin` の中身は「表」と「裏」の2つしかない。この2つから順番に選ぶ作業をすると、1つ目に表（裏）が出れば、2回目に残されているのは裏（表）だけなので、2回目がランダムではなくなってしまう。\n\n試しに選ぶ回数を3回にしてみよう。\n\n```{r}\n#| error: true\nsample(coin, size = 3)\n```\n\nエラーが出た。選ぶ対象が2つしかないのに3つは選べないのでエラーになる（エラーをよく読むと、そのように書いてある）。\n\nしたがって、`sample()` を使ってコイン投げを2回以上行うには、少し工夫が必要になる。`sample()` は私たちが特に指示をしないと非復元抽出（sampling without replacement）を行う。非復元抽出というのは、1度選んだものは選択肢から外すという選び方である。何度もコイン投げを繰り返すには、**復元抽出** (sampling with <u>replace</u>ment) を行えばよい。復元抽出では、1度選んだものも選択肢の中に戻す（選択肢として復元する）という選び方である。 `sapmle()` で復元抽出を実行するために、`replace = TRUE` という指示を加える。\n\n```{r}\nsample(coin, size = 5, replace = TRUE)\n```\n\nこれでコイン投げを複数回実行できる。\n\n試しにコインを10回投げて、その結果を **coin10** という名前で保存してみよう。（`%>% print()`は結果を表示するためにつけているだけなので、結果を表示する必要がないならなくてもよい。）\n\n```{r, hold = TRUE}\ncoin10 <- sample(coin, size = 10, replace = TRUE) %>% \n  print()\n```\n\n10回のうち、表は何回出ただろうか？Rを使って数えてみよう。数えるために、以下の方法をとる。\n\n1.  特定のコイン投げ（1回目, 2回目, $\\dots$, 10回目）が表だったかどうか調べる\n2.  表の回数を数える\n\nRである特定の値（数または文字列）になっているか調べたいときは、`==` （二重等号）を使う。\n\n::: callout-warning\n`=` \\[等号1つ\\] は `<-` と同じで右側の内容を左側に保存してしまうので注意。\n:::\n\n「二重等号の左側は右側と同じかどうか」を調べ、同じときは `TRUE`（真）、異なるときは `FALSE`（偽）という答えが返ってくる。簡単な例で確認してみよう。\n\n```{r}\na <- 2    # aに2を代入する\na == 2\na == 3\na == \"裏\" # 文字列と比べるときは文字列を引用符で囲む\n```\n\nこれを使って、上で行った10回のコイン投げが表だったかどうか確かめよう。\n\n```{r}\ncoin10 == \"表\"\n```\n\nこのように、各回について、表 (`TRUE`) か裏 (`FALSE`) かを教えてくれる。\n\n私たちは表が何回出たかを知りたいので、`TRUE` の回数を数えればいい。ここでは、10回しか投げていないので、自力で数えることもできるが、数が増えると数えるのは面倒である。そこで、Rを使って数える。Rでは `TRUE` と `FALSE` を数として扱うと、`TRUE` は 1、`FALSE` は0 とみなされる。したがって、`TRUE`の数を数えたいなら、上の結果を合計すればよい。合計は `sum()` で求められるので、次のようにする。\n\n```{r}\nsum(coin10 == \"表\")\n```\n\n表は10回中`r sum(coin10 == \"表\")`回だったことがわかる。\n\n### サイコロ投げ\n\n同じ関数を使って、サイコロ (die) 投げを実行してみよう。 まずは、サイコロを定義する。\n\n```{r}\n#| hold: true\ndie <- 1:6  # 1から6までの整数\n# 以下のような書き方も可能\n# die <- c(1, 2, 3, 4, 5, 6)\n# die <- seq(from = 1, to = 6, by = 1)\n```\n\nこれを復元抽出すれば、サイコロ投げを何度も行える。100回投げてみよう。\n\n```{r}\ndie100 <- sample(die, size = 100, replace = TRUE)\n```\n\n3は何回出ただろうか？\n\n```{r}\nsum(die100 == 3)\n```\n\n`r sum(die100 == 3)`回出たことがわかる。\n\nここまでは、「正しいコイン (a fair coin)」や「正しいサイコロ (a fair die)」を想定してきたが、特定の目が出やすいサイコロ（やコイン）を使うこともできる。「1が出る確率だけ他の目の4倍」というサイコロを1,000回投げてみよう。そのために、`prob` で各目が出る比率を指定する（確率を指定してもよい）。\n\n```{r}\nunfair1000 <- sample(die, \n                     size = 1000, \n                     replace = TRUE,\n                     prob = c(4, 1, 1, 1, 1, 1))\n```\n\n1が何回出たか確かめてみよう。\n\n```{r}\nsum(unfair1000 == 1)\n```\n\n1,000回のうち、`r sum(unfair1000 == 1)`回1の目が出たことがわかる。\n\nこのように、それぞれの選択肢が選べる確率を自由に設定して実験することができる。\n\nまた、選ぶ対象も自由に設定できる。たとえば、\n\n```{r}\nsample(c(\"高知工科大\", \"高知県立大\", \"高知大\"), \n       size = 1, \n       replace = TRUE, \n       prob = c(3, 2, 1))\n```\n\nのようなこともできる。\n\n**実習課題 (1)**\n\n-   1から6までの目がある「正しい」サイコロを2個振るという作業を1,000回繰り返し、出た目の合計が9になる回数を数えてみよう。\n-   「正しくない」コイン（表が出る確率が0.5ではないコイン）を500回投げ、表が出た回数を数えよう。表が出る確率は自由に設定してよい（ただし、0, 0.5, 1 を除く）。\n\n## 確率分布からの乱数生成\n\nRでは、代表的な確率分布から乱数を生成することが可能である。基本的には、 **r**（randomの頭文字）と、分布名の最初の数文字を組み合わせた関数を使う。\n\n### 一様分布\n\n一様分布 (<u>unif</u>orm distribution) からの乱数生成には、`runif()` を使う。この関数では、以下の3つの引数（ひきすう）を指定する。\n\n1.  `n`: 生成する乱数の個数（必ず指定する）\n2.  `min`: 最小値（指定しないと 0 に設定される）\n3.  `max`: 最大値（指定しないと 1 に設定される）\n\n::: callout-note\n`runif()`の `min = 0`や `max = 1` などのように、引数を指定しないときに自動的に設定される値を既定値またはデフォルト (default value) と言う。「`runif()` 関数の `min` のデフォルトは0である」のような言い方をするので、覚えておこう。\n:::\n\n時計のように1から12（12は0とも考えらえる）の数字が書いてあるような円盤の上でランダムにルーレットを回すことを考える。そうすると、0から12の間のどの位置にルーレットが止まる確率も等しいと考えられる。このような状況を、最小値が0で最大値が12の（連続な）一様分布（連続一様分布; continuous <u>unif</u>orm distribution）で表すことができる。このルーレットを100回使ってみよう。\n\n```{r}\na1 <- runif(n = 100, min = 0, max = 12)\n```\n\n結果をヒストグラムにしてみよう。\n\n```{r}\ndf1 <- tibble(a1)  # 結果をデータフレーム (tibble) に入れる\nh1 <- ggplot(df1, aes(x = a1)) +\n  geom_histogram(binwidth = 1, \n                 boundary = 0,\n                 fill = \"royalblue\", \n                 color = \"black\") +\n  labs(x = \"時計盤上のルーレットからの乱数\", \n       y = \"度数\") +\n  scale_x_continuous(breaks = 0 : 12)  # x軸の目盛を調整\nplot(h1)\n```\n\n乱数の個数を増やしてみよう。\n\n```{r}\na2 <- runif(n = 10000, min = 0, max = 12)\ndf2 <- tibble(a2)\nh2 <- ggplot(df2, aes(x = a2)) +\n  geom_histogram(binwidth = 1, \n                 boundary = 0,\n                 fill = \"royalblue\", \n                 color = \"black\") +\n  labs(x = \"時計盤上のルーレットからの乱数\", \n       y = \"度数\") +\n  scale_x_continuous(breaks = 0 : 12)  # x軸の目盛を調整\nplot(h2)\n```\n\n連続ではない一様分布（離散一様分布; discrete uniform distribution）からの乱数は、上で使った `sample()` で生成することができる。「正しいサイコロ」投げは、「1から6までの整数の（非連続な）一様分布」である。\n\n```{r}\na3 <- sample(1 : 6, size = 100000, replace = TRUE)\ndf3 <- tibble(a3)\np3 <- ggplot(df3, aes(x = a3)) +\n  geom_bar(width = 0.5) +\n  labs(x = \"出た目\", y = \"回数\") +\n  scale_x_continuous(breaks = 1 : 6)\nplot(p3)\n```\n\n### 二項分布\n\nコイン投げの結果は、表か裏の2パタン（通常、「成功」と「失敗」と呼ばれる。コイン投げでは、表と裏のどちらを成功と呼んでもよいが、ここでは表を成功、裏を失敗としておく）しかない。また、同じコインを何度か投げることを繰り返すとき、1回1回のコイン投げで表が出る確率は一定であると考えられる。\n\nこのように、結果が成功と失敗の2種類のみで、成功確率が $\\theta$ で一定（したがって、失敗確率は \"$1-\\theta$\" で一定）であるような試行を $N$ 回繰り返したとき、その成功回数の分布を、「**試行回数** $N$ で成功確率 $\\theta$ の二項分布 (<u>binom</u>ial distribution)」と呼ぶ。\n\n理論的には、二項分布の平均値（期待値）は $N \\theta$、分散は $N \\theta (1 - \\theta)$ になる。したがって、標準偏差は $\\sqrt{N \\theta (1 - \\theta)}$ になる。また、最小値は0（1ではないので注意）、最大値は $N$ である。\n\nたとえば、「試行回数5で成功確率0.3の二項分布」の平均値は$5 \\cdot 0.3 = 1.5$、分散は $5 \\cdot 0.3 (1 - 0.3) = 1.05$、標準偏差は $\\sqrt{1.05} \\approx 1.02$ である（「$\\approx$」は「ほぼ等しい」という意味）。最小値は0、最大値は5である。 この分布は、次の図のような形をしている。\n\n```{r}\n#| echo: false\nbin_ex1 <- dbinom(0:5, size = 5, prob = 0.3)\ndd <- data.frame(x = 0:5, y = bin_ex1)\np_bin1 <- ggplot(dd, aes(x, y)) +\n  geom_bar(stat = \"identity\") +\n  scale_x_continuous(breaks = 0:5) +\n  labs(x = \"成功回数\", \n       y = \"確率（確率質量）\",\n       title = \"試行回数5で成功確率0.3の二項分布\")\nprint(p_bin1)\n```\n\n`sample()` を使わずに、Rでコイン投げを実行してみよう。Rで二項分布に従う乱数を生成する関数は、`rbinom()` である。この関数で指定しなければならない引数（ひきすう）は以下の3つである。\n\n1.  `n`：実験の回数\n2.  `size`: 試行回数（0以上の（非負の）整数）\n3.  `prob`: 成功確率（コイン投げで表が出る確率。0以上1以下）\n\nたとえば、`rbinom(n = 8, size = 10, prob = 0.4 )` とすると、「表が出る確率が0.4のコインを10回投げる」という実験を8回実行する。\n\n```{r}\nrbinom(n = 8, size = 10, prob = 0.4)\n```\n\n結果として、8つの数字が表示されるが、それぞれの数字が、1回ごとの実験（コインを10回投げる）で表が何回出たかを表している。\n\n::: callout-warning\nこの数は乱数 (random numbers)、つまり、Rによってランダムに生み出された数字なので、人によって異なる数字が得られるはずで、このWebページと同じ数字が出るとは限らない。\n:::\n\n試しにまったく同じ関数をもう一度実行すると、違う数が得られる。\n\n```{r}\nrbinom(n = 8, size = 10, prob = 0.4)\n```\n\n表が出る確率が0.5のコインを使って、1回のコイン投げ実験を1回だけ実行するには、\n\n```{r}\nrbinom(n = 1, size = 1, prob = 0.5)\n```\n\nとする。0と出れば表が0回出た（つまり、裏が出た）ということであり、1ならば表が出たということである。何度か試してみよう。\n\n```{r}\nrbinom(n = 1, size = 1, prob = 0.5)\n```\n\n```{r}\nrbinom(n = 1, size = 1, prob = 0.5)\n```\n\n```{r}\nrbinom(n = 1, size = 1, prob = 0.5)\n```\n\n```{r}\nrbinom(n = 1, size = 1, prob = 0.5)\n```\n\n```{r}\nrbinom(n = 1, size = 1, prob = 0.5)\n```\n\n表が出る確率が0.5のコインを使って、1回のコイン投げ実験を10回まとめて実行するには、次のようにする。\n\n```{r}\nrbinom(n = 10, size = 1, prob = 0.5)\n```\n\n**実習課題 (2)**\n\n-   3つの引数の値を変えて、様々な条件で二項分布からの乱数生成を試してみよう！\n\n<br>\n\n### 正規分布\n\n正規分布 (<u>norm</u>al distribution) からの乱数生成には、`rnorm()` を使う。この関数では、以下の3つの引数（ひきすう）を指定する。\n\n1.  `n`: 生成する乱数の個数（必ず指定する）\n2.  `mean`: 正規分布の平均値（指定しないと 0 に設定される）\n3.  `sd`: 正規分布の標準偏差（指定しないと 1 に設定される）\n\n平均と標準偏差を指定しないと、平均が0で標準偏差が1の正規分布、すなわち標準正規分布からの乱数生成が行われる。\n\n標準正規分布から100個の乱数を生成してみよう。\n\n```{r}\nb1 <- rnorm(n = 100)\n```\n\n作った乱数をヒストグラムにしてみよう。\n\n```{r}\n#| message: false\ndf_n1 <- tibble(b1)\nh_n1 <- ggplot(df_n1, aes(x = b1)) +\n  geom_histogram(color = \"black\", fill = \"dodgerblue\") +\n  labs(x = \"標準正規分布からの乱数\", y = \"度数\")\nplot(h_n1)\n```\n\n正規分布に見えるだろうか？ 乱数の平均値と標準偏差を計算してみよう。\n\n```{r}\nmean(b1)\nsd(b1)\n```\n\n元の分布の平均値と標準偏差と比べると、どんなことが言えるだろうか？\n\n乱数の数を増やして同じことしてみよう。\n\n```{r}\n#| message: false\nb2 <- rnorm(n = 10000)\ndf_n2 <- tibble(b2)\nh_n2 <- ggplot(df_n2, aes(x = b2)) +\n  geom_histogram(color = \"black\", fill = \"dodgerblue\") +\n  labs(x = \"標準正規分布からの乱数\", y = \"度数\")\nplot(h_n2)\n```\n\n今度はどうだろうか？\n\n乱数の平均値と標準偏差を計算してみよう。\n\n```{r}\nmean(b2)\nsd(b2)\n```\n\n元の分布の平均値と標準偏差と比べると、どんなことが言えるだろうか？\n\n**実習課題 (3)**\n\n-   平均が10, 標準偏差が4の正規分布から乱数を1,000個生成し、結果をヒストグラムにしてみよう。また、乱数の平均値と標準偏差を計算し、元になった分布と比べてみよう。\n"},"formats":{"html":{"execute":{"fig-width":5,"fig-height":4,"fig-format":"retina","fig-dpi":96,"error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"engine":"knitr"},"render":{"keep-tex":false,"keep-yaml":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"self-contained-math":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","number-sections":true,"highlight-style":"arrow","html-math-method":"mathjax","filters":["add-target-attr.lua"],"output-file":"rng.html"},"language":{"toc-title-document":"このページの内容","toc-title-website":"On this page","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"注","callout-tip-caption":"ヒント","callout-note-caption":"備考","callout-warning-caption":"注意","callout-important-caption":"重要","callout-danger-caption":"危険！","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"コードを表示","code-tools-hide-all-code":"コードを隠す","code-tools-view-source":"Source を見る","code-tools-source-code":"Source Code","copy-button-tooltip":"コピーする","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","crossref-fig-title":"図","crossref-tbl-title":"表","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Newest","listing-page-order-by-date-desc":"Oldest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items"},"metadata":{"lang":"ja","fig-responsive":true,"editor":"source","crossref":{"ref-hyperlink":true},"theme":"yeti"},"extensions":{"book":{"multiFile":true}}}}}